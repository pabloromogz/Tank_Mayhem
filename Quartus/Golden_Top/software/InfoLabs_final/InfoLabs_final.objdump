
InfoLabs_final.elf:     file format elf32-littlenios2
InfoLabs_final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002090 memsz 0x00002090 flags r-x
    LOAD off    0x000030b0 vaddr 0x000120b0 paddr 0x00012154 align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x000031f8 vaddr 0x000121f8 paddr 0x000121f8 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001da4  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000018c  00011f24  00011f24  00002f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  000120b0  00012154  000030b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000121f8  000121f8  000031f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012318  00012318  00003154  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003154  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000440  00000000  00000000  00003178  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003f67  00000000  00000000  000035b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a39  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001dbb  00000000  00000000  00008f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000560  00000000  00000000  0000ad14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016b4  00000000  00000000  0000b274  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000034d4  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000fdfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000610  00000000  00000000  0000fe10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00011a4e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00011a51  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011a54  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011a55  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00011a56  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00011a5a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00011a5e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00011a62  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00011a6b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00011a74  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00011a7d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  00011a8f  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  00011aae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000718bb  00000000  00000000  00016ab7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011f24 l    d  .rodata	00000000 .rodata
000120b0 l    d  .rwdata	00000000 .rwdata
000121f8 l    d  .bss	00000000 .bss
00012318 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../InfoLabs_final_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 board_code.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000120b0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011d70 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00012210 g     O .bss	00000004 alt_instruction_exception_handler
000119c4 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00012218 g     O .bss	00000100 alt_irq
00012154 g       *ABS*	00000000 __flash_rwdata_start
000101bc g     F .text	00000080 sys_timer_isr
00012138 g     O .rwdata	00000004 jtag_uart
00011e5c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011c64 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012214 g     O .bss	00000004 errno
00012208 g     O .bss	00000004 alt_argv
0001a134 g       *ABS*	00000000 _gp
000120dc g     O .rwdata	00000030 alt_fd_list
00011de4 g     F .text	00000074 alt_find_dev
000116c8 g     F .text	000000dc .hidden __floatsidf
00011e64 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001213c g     O .rwdata	00000004 alt_max_fd
00011850 g     F .text	00000094 alt_irq_register
00010530 g     F .text	000008ac .hidden __adddf3
00012318 g       *ABS*	00000000 __bss_end
00012200 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001210c g     O .rwdata	00000028 alt_dev_null
00011d6c g     F .text	00000004 alt_dcache_flush_all
00011648 g     F .text	00000080 .hidden __fixdfsi
00012154 g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00012140 g     O .rwdata	00000008 alt_dev_list
000120b0 g       *ABS*	00000000 __ram_rodata_end
000121fd g     O .bss	00000001 led
00012318 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000117a4 g     F .text	00000064 .hidden __clzsi2
00011bd8 g     F .text	00000034 altera_avalon_jtag_uart_write
000119f0 g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
000121f8 g     O .bss	00000004 level
00011bc8 g     F .text	00000010 alt_sys_init
00011c14 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011808 g     F .text	00000028 .hidden __mulsi3
000120b0 g       *ABS*	00000000 __ram_rwdata_start
00011f24 g       *ABS*	00000000 __ram_rodata_start
00011cbc g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011ed8 g     F .text	00000030 memcmp
00012318 g       *ABS*	00000000 __alt_stack_base
00010ddc g     F .text	0000086c .hidden __muldf3
00011d78 g     F .text	0000006c alt_dev_llist_insert
000121f8 g       *ABS*	00000000 __bss_start
00011830 g     F .text	00000020 memset
000102f4 g     F .text	0000023c main
00012204 g     O .bss	00000004 alt_envp
00012150 g     O .rwdata	00000004 alt_errno
00011f24 g       *ABS*	00000000 __flash_rodata_start
00011ba8 g     F .text	00000020 alt_irq_init
00011fa3 g     O .rodata	00000100 .hidden __clz_tab
0001220c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000121fc g     O .bss	00000001 pwm
00012148 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011c0c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00012154 g       *ABS*	00000000 _edata
00012318 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011d14 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011c28 g     F .text	00000020 alt_up_accelerometer_spi_read
00011c48 g     F .text	0000001c alt_up_accelerometer_spi_write
00011f08 g     F .text	0000001c strlen
00011b60 g     F .text	00000048 alt_putchar
00011e58 g     F .text	00000004 alt_icache_flush_all
00012134 g     O .rwdata	00000004 alt_priority_mask
000118e4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84088604 	addi	r16,r16,8728

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a03717 	ldw	r2,-32548(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a84d14 	ori	gp,gp,41268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10887e14 	ori	r2,r2,8696

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c8c614 	ori	r3,r3,8984

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00118e40 	call	118e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00119c40 	call	119c4 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a03117 	ldw	r2,-32572(gp)
   101cc:	d1603207 	ldb	r5,-32568(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c42804 	addi	r3,r3,4256
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level = 0;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a03243 	ldbu	r2,-32567(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a03243 	ldbu	r2,-32567(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a03243 	ldbu	r2,-32567(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a03203 	ldbu	r2,-32568(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0203205 	stb	zero,-32568(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a03205 	stb	r2,-32568(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level = 0;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10842804 	addi	r2,r2,4256
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10250:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10254:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10258:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1025c:	10c001cc 	andi	r3,r2,7
   10260:	00800204 	movi	r2,8
   10264:	10cfc83a 	sub	r7,r2,r3
   10268:	11ce983a 	sll	r7,r2,r7
   1026c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10270:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10274:	3884b03a 	or	r2,r7,r2
   10278:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1027c:	29000015 	stw	r4,0(r5)
   10280:	f800283a 	ret

00010284 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   10290:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040104 	addi	r16,r16,4100
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40004 	addi	r3,r3,4096
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40204 	addi	r3,r3,4104
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40304 	addi	r3,r3,4108
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	01000044 	movi	r4,1
   102d8:	00118500 	call	11850 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)

}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <main>:

int main() {
   102f4:	deffcc04 	addi	sp,sp,-208
	int button_datain;
	double x[10] = {0};
   102f8:	01801404 	movi	r6,80
   102fc:	d989883a 	add	r4,sp,r6
   10300:	000b883a 	mov	r5,zero
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

int main() {
   10304:	dfc03315 	stw	ra,204(sp)
   10308:	df003215 	stw	fp,200(sp)
   1030c:	ddc03115 	stw	r23,196(sp)
   10310:	dd803015 	stw	r22,192(sp)
   10314:	dd402f15 	stw	r21,188(sp)
   10318:	dd002e15 	stw	r20,184(sp)
   1031c:	dcc02d15 	stw	r19,180(sp)
   10320:	dc802c15 	stw	r18,176(sp)
   10324:	dc402b15 	stw	r17,172(sp)
   10328:	dc002a15 	stw	r16,168(sp)
	int button_datain;
	double x[10] = {0};
   1032c:	00118300 	call	11830 <memset>
	double x_average=0;
	double y[10] = {0};
   10330:	d809883a 	mov	r4,sp
   10334:	01801404 	movi	r6,80
   10338:	000b883a 	mov	r5,zero
   1033c:	00118300 	call	11830 <memset>
	double y_average=0;
	int x_int, y_int;
    alt_32 x_read, y_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10340:	01000074 	movhi	r4,1
   10344:	2107c904 	addi	r4,r4,7972
   10348:	0011c0c0 	call	11c0c <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   1034c:	10006826 	beq	r2,zero,104f0 <main+0x1fc>
    	alt_printf("Can't connect to Accelerometer!\n\r");
        return 1;
    }
    else{alt_printf("connected to accelerometer");}
   10350:	01000074 	movhi	r4,1
   10354:	2107d804 	addi	r4,r4,8032
   10358:	1025883a 	mov	r18,r2
   1035c:	00119f00 	call	119f0 <alt_printf>

    timer_init(sys_timer_isr);
   10360:	01000074 	movhi	r4,1
   10364:	21006f04 	addi	r4,r4,444

    while (1) {
    	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10368:	054000b4 	movhi	r21,2
    	alt_printf("Can't connect to Accelerometer!\n\r");
        return 1;
    }
    else{alt_printf("connected to accelerometer");}

    timer_init(sys_timer_isr);
   1036c:	00102840 	call	10284 <timer_init>

    while (1) {
    	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10370:	ad442404 	addi	r21,r21,4240
        for (int i=9; i>0; i--){
                	y[i]=y[i-1];
                }
        x[0]= x_read;
        y[0]= y_read;
        for (int i=0; i<10; i++){
   10374:	04c01404 	movi	r19,80
    else{alt_printf("connected to accelerometer");}

    timer_init(sys_timer_isr);

    while (1) {
    	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10378:	ad000037 	ldwio	r20,0(r21)
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   1037c:	d9402904 	addi	r5,sp,164
   10380:	9009883a 	mov	r4,r18
   10384:	0011c640 	call	11c64 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   10388:	d9402804 	addi	r5,sp,160
   1038c:	9009883a 	mov	r4,r18
   10390:	0011cbc0 	call	11cbc <alt_up_accelerometer_spi_read_y_axis>
   10394:	d8802404 	addi	r2,sp,144
        x_average = 0;
        y_average = 0;
        for (int i=9; i>0; i--){
   10398:	00c00244 	movi	r3,9
        	x[i]=x[i-1];
   1039c:	11000017 	ldw	r4,0(r2)
   103a0:	18ffffc4 	addi	r3,r3,-1
   103a4:	10bffe04 	addi	r2,r2,-8
   103a8:	11000415 	stw	r4,16(r2)
   103ac:	11000317 	ldw	r4,12(r2)
   103b0:	11000515 	stw	r4,20(r2)
    	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
        x_average = 0;
        y_average = 0;
        for (int i=9; i>0; i--){
   103b4:	183ff91e 	bne	r3,zero,1039c <__alt_data_end+0xffff039c>
   103b8:	d8801004 	addi	r2,sp,64
   103bc:	00c00244 	movi	r3,9
        	x[i]=x[i-1];
        }
        for (int i=9; i>0; i--){
                	y[i]=y[i-1];
   103c0:	11000017 	ldw	r4,0(r2)
   103c4:	18ffffc4 	addi	r3,r3,-1
   103c8:	10bffe04 	addi	r2,r2,-8
   103cc:	11000415 	stw	r4,16(r2)
   103d0:	11000317 	ldw	r4,12(r2)
   103d4:	11000515 	stw	r4,20(r2)
        x_average = 0;
        y_average = 0;
        for (int i=9; i>0; i--){
        	x[i]=x[i-1];
        }
        for (int i=9; i>0; i--){
   103d8:	183ff91e 	bne	r3,zero,103c0 <__alt_data_end+0xffff03c0>
                	y[i]=y[i-1];
                }
        x[0]= x_read;
   103dc:	d9002917 	ldw	r4,164(sp)
        y[0]= y_read;
   103e0:	0021883a 	mov	r16,zero

    while (1) {
    	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
        x_average = 0;
   103e4:	002d883a 	mov	r22,zero
        	x[i]=x[i-1];
        }
        for (int i=9; i>0; i--){
                	y[i]=y[i-1];
                }
        x[0]= x_read;
   103e8:	00116c80 	call	116c8 <__floatsidf>
        y[0]= y_read;
   103ec:	d9002817 	ldw	r4,160(sp)
        	x[i]=x[i-1];
        }
        for (int i=9; i>0; i--){
                	y[i]=y[i-1];
                }
        x[0]= x_read;
   103f0:	d8801415 	stw	r2,80(sp)
   103f4:	d8c01515 	stw	r3,84(sp)
        y[0]= y_read;
   103f8:	00116c80 	call	116c8 <__floatsidf>
   103fc:	d8800015 	stw	r2,0(sp)
   10400:	d8c00115 	stw	r3,4(sp)

    while (1) {
    	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
        x_average = 0;
   10404:	0023883a 	mov	r17,zero
                	y[i]=y[i-1];
                }
        x[0]= x_read;
        y[0]= y_read;
        for (int i=0; i<10; i++){
        	x_average += x[i]*0.1;
   10408:	d8c01404 	addi	r3,sp,80
   1040c:	1c05883a 	add	r2,r3,r16
   10410:	11000017 	ldw	r4,0(r2)
   10414:	11400117 	ldw	r5,4(r2)
   10418:	01a666b4 	movhi	r6,39322
   1041c:	01cfeeb4 	movhi	r7,16314
   10420:	31a66684 	addi	r6,r6,-26214
   10424:	39e66644 	addi	r7,r7,-26215
   10428:	0010ddc0 	call	10ddc <__muldf3>
   1042c:	b009883a 	mov	r4,r22
   10430:	880b883a 	mov	r5,r17
   10434:	100d883a 	mov	r6,r2
   10438:	180f883a 	mov	r7,r3
   1043c:	00105300 	call	10530 <__adddf3>
   10440:	84000204 	addi	r16,r16,8
   10444:	1039883a 	mov	fp,r2
   10448:	182f883a 	mov	r23,r3
   1044c:	102d883a 	mov	r22,r2
   10450:	1823883a 	mov	r17,r3
        for (int i=9; i>0; i--){
                	y[i]=y[i-1];
                }
        x[0]= x_read;
        y[0]= y_read;
        for (int i=0; i<10; i++){
   10454:	84ffec1e 	bne	r16,r19,10408 <__alt_data_end+0xffff0408>
   10458:	0021883a 	mov	r16,zero
   1045c:	002d883a 	mov	r22,zero
   10460:	0023883a 	mov	r17,zero
        	x_average += x[i]*0.1;
        }
        for (int i=0; i<10; i++){
			y_average += y[i]*0.1;
   10464:	dc05883a 	add	r2,sp,r16
   10468:	11000017 	ldw	r4,0(r2)
   1046c:	11400117 	ldw	r5,4(r2)
   10470:	01a666b4 	movhi	r6,39322
   10474:	01cfeeb4 	movhi	r7,16314
   10478:	31a66684 	addi	r6,r6,-26214
   1047c:	39e66644 	addi	r7,r7,-26215
   10480:	0010ddc0 	call	10ddc <__muldf3>
   10484:	b009883a 	mov	r4,r22
   10488:	880b883a 	mov	r5,r17
   1048c:	100d883a 	mov	r6,r2
   10490:	180f883a 	mov	r7,r3
   10494:	00105300 	call	10530 <__adddf3>
   10498:	84000204 	addi	r16,r16,8
   1049c:	102d883a 	mov	r22,r2
   104a0:	1823883a 	mov	r17,r3
        x[0]= x_read;
        y[0]= y_read;
        for (int i=0; i<10; i++){
        	x_average += x[i]*0.1;
        }
        for (int i=0; i<10; i++){
   104a4:	84ffef1e 	bne	r16,r19,10464 <__alt_data_end+0xffff0464>
			y_average += y[i]*0.1;
		}
        x_int = x_average;
   104a8:	e009883a 	mov	r4,fp
   104ac:	b80b883a 	mov	r5,r23
   104b0:	00116480 	call	11648 <__fixdfsi>
        y_int = y_average;
        alt_printf("<-->x: %x<-->y: %x<-->buttons: %x<-->\n", x_int, y_int, button_datain);
   104b4:	b009883a 	mov	r4,r22
   104b8:	880b883a 	mov	r5,r17
        	x_average += x[i]*0.1;
        }
        for (int i=0; i<10; i++){
			y_average += y[i]*0.1;
		}
        x_int = x_average;
   104bc:	1021883a 	mov	r16,r2
        y_int = y_average;
        alt_printf("<-->x: %x<-->y: %x<-->buttons: %x<-->\n", x_int, y_int, button_datain);
   104c0:	00116480 	call	11648 <__fixdfsi>
   104c4:	01000074 	movhi	r4,1
   104c8:	100d883a 	mov	r6,r2
   104cc:	800b883a 	mov	r5,r16
   104d0:	a00f883a 	mov	r7,r20
   104d4:	2107df04 	addi	r4,r4,8060
   104d8:	00119f00 	call	119f0 <alt_printf>
        convert_read(x_int, & level, & led);
   104dc:	d1a03244 	addi	r6,gp,-32567
   104e0:	d1603104 	addi	r5,gp,-32572
   104e4:	8009883a 	mov	r4,r16
   104e8:	00102500 	call	10250 <convert_read>

    }
   104ec:	003fa206 	br	10378 <__alt_data_end+0xffff0378>
	int x_int, y_int;
    alt_32 x_read, y_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
    	alt_printf("Can't connect to Accelerometer!\n\r");
   104f0:	01000074 	movhi	r4,1
   104f4:	2107cf04 	addi	r4,r4,7996
   104f8:	00119f00 	call	119f0 <alt_printf>
        convert_read(x_int, & level, & led);

    }

    return 0;
}
   104fc:	00800044 	movi	r2,1
   10500:	dfc03317 	ldw	ra,204(sp)
   10504:	df003217 	ldw	fp,200(sp)
   10508:	ddc03117 	ldw	r23,196(sp)
   1050c:	dd803017 	ldw	r22,192(sp)
   10510:	dd402f17 	ldw	r21,188(sp)
   10514:	dd002e17 	ldw	r20,184(sp)
   10518:	dcc02d17 	ldw	r19,180(sp)
   1051c:	dc802c17 	ldw	r18,176(sp)
   10520:	dc402b17 	ldw	r17,172(sp)
   10524:	dc002a17 	ldw	r16,168(sp)
   10528:	dec03404 	addi	sp,sp,208
   1052c:	f800283a 	ret

00010530 <__adddf3>:
   10530:	02c00434 	movhi	r11,16
   10534:	5affffc4 	addi	r11,r11,-1
   10538:	2806d7fa 	srli	r3,r5,31
   1053c:	2ad4703a 	and	r10,r5,r11
   10540:	3ad2703a 	and	r9,r7,r11
   10544:	3804d53a 	srli	r2,r7,20
   10548:	3018d77a 	srli	r12,r6,29
   1054c:	280ad53a 	srli	r5,r5,20
   10550:	501490fa 	slli	r10,r10,3
   10554:	2010d77a 	srli	r8,r4,29
   10558:	481290fa 	slli	r9,r9,3
   1055c:	380ed7fa 	srli	r7,r7,31
   10560:	defffb04 	addi	sp,sp,-20
   10564:	dc800215 	stw	r18,8(sp)
   10568:	dc400115 	stw	r17,4(sp)
   1056c:	dc000015 	stw	r16,0(sp)
   10570:	dfc00415 	stw	ra,16(sp)
   10574:	dcc00315 	stw	r19,12(sp)
   10578:	1c803fcc 	andi	r18,r3,255
   1057c:	2c01ffcc 	andi	r16,r5,2047
   10580:	5210b03a 	or	r8,r10,r8
   10584:	202290fa 	slli	r17,r4,3
   10588:	1081ffcc 	andi	r2,r2,2047
   1058c:	4b12b03a 	or	r9,r9,r12
   10590:	300c90fa 	slli	r6,r6,3
   10594:	91c07526 	beq	r18,r7,1076c <__adddf3+0x23c>
   10598:	8087c83a 	sub	r3,r16,r2
   1059c:	00c0ab0e 	bge	zero,r3,1084c <__adddf3+0x31c>
   105a0:	10002a1e 	bne	r2,zero,1064c <__adddf3+0x11c>
   105a4:	4984b03a 	or	r2,r9,r6
   105a8:	1000961e 	bne	r2,zero,10804 <__adddf3+0x2d4>
   105ac:	888001cc 	andi	r2,r17,7
   105b0:	10000726 	beq	r2,zero,105d0 <__adddf3+0xa0>
   105b4:	888003cc 	andi	r2,r17,15
   105b8:	00c00104 	movi	r3,4
   105bc:	10c00426 	beq	r2,r3,105d0 <__adddf3+0xa0>
   105c0:	88c7883a 	add	r3,r17,r3
   105c4:	1c63803a 	cmpltu	r17,r3,r17
   105c8:	4451883a 	add	r8,r8,r17
   105cc:	1823883a 	mov	r17,r3
   105d0:	4080202c 	andhi	r2,r8,128
   105d4:	10005926 	beq	r2,zero,1073c <__adddf3+0x20c>
   105d8:	84000044 	addi	r16,r16,1
   105dc:	0081ffc4 	movi	r2,2047
   105e0:	8080ba26 	beq	r16,r2,108cc <__adddf3+0x39c>
   105e4:	00bfe034 	movhi	r2,65408
   105e8:	10bfffc4 	addi	r2,r2,-1
   105ec:	4090703a 	and	r8,r8,r2
   105f0:	4004977a 	slli	r2,r8,29
   105f4:	4010927a 	slli	r8,r8,9
   105f8:	8822d0fa 	srli	r17,r17,3
   105fc:	8401ffcc 	andi	r16,r16,2047
   10600:	4010d33a 	srli	r8,r8,12
   10604:	9007883a 	mov	r3,r18
   10608:	1444b03a 	or	r2,r2,r17
   1060c:	8401ffcc 	andi	r16,r16,2047
   10610:	8020953a 	slli	r16,r16,20
   10614:	18c03fcc 	andi	r3,r3,255
   10618:	01000434 	movhi	r4,16
   1061c:	213fffc4 	addi	r4,r4,-1
   10620:	180697fa 	slli	r3,r3,31
   10624:	4110703a 	and	r8,r8,r4
   10628:	4410b03a 	or	r8,r8,r16
   1062c:	40c6b03a 	or	r3,r8,r3
   10630:	dfc00417 	ldw	ra,16(sp)
   10634:	dcc00317 	ldw	r19,12(sp)
   10638:	dc800217 	ldw	r18,8(sp)
   1063c:	dc400117 	ldw	r17,4(sp)
   10640:	dc000017 	ldw	r16,0(sp)
   10644:	dec00504 	addi	sp,sp,20
   10648:	f800283a 	ret
   1064c:	0081ffc4 	movi	r2,2047
   10650:	80bfd626 	beq	r16,r2,105ac <__alt_data_end+0xffff05ac>
   10654:	4a402034 	orhi	r9,r9,128
   10658:	00800e04 	movi	r2,56
   1065c:	10c09f16 	blt	r2,r3,108dc <__adddf3+0x3ac>
   10660:	008007c4 	movi	r2,31
   10664:	10c0c216 	blt	r2,r3,10970 <__adddf3+0x440>
   10668:	00800804 	movi	r2,32
   1066c:	10c5c83a 	sub	r2,r2,r3
   10670:	488a983a 	sll	r5,r9,r2
   10674:	30c8d83a 	srl	r4,r6,r3
   10678:	3084983a 	sll	r2,r6,r2
   1067c:	48c6d83a 	srl	r3,r9,r3
   10680:	290cb03a 	or	r6,r5,r4
   10684:	1004c03a 	cmpne	r2,r2,zero
   10688:	308cb03a 	or	r6,r6,r2
   1068c:	898dc83a 	sub	r6,r17,r6
   10690:	89a3803a 	cmpltu	r17,r17,r6
   10694:	40d1c83a 	sub	r8,r8,r3
   10698:	4451c83a 	sub	r8,r8,r17
   1069c:	3023883a 	mov	r17,r6
   106a0:	4080202c 	andhi	r2,r8,128
   106a4:	10002326 	beq	r2,zero,10734 <__adddf3+0x204>
   106a8:	04c02034 	movhi	r19,128
   106ac:	9cffffc4 	addi	r19,r19,-1
   106b0:	44e6703a 	and	r19,r8,r19
   106b4:	98007626 	beq	r19,zero,10890 <__adddf3+0x360>
   106b8:	9809883a 	mov	r4,r19
   106bc:	00117a40 	call	117a4 <__clzsi2>
   106c0:	10fffe04 	addi	r3,r2,-8
   106c4:	010007c4 	movi	r4,31
   106c8:	20c07716 	blt	r4,r3,108a8 <__adddf3+0x378>
   106cc:	00800804 	movi	r2,32
   106d0:	10c5c83a 	sub	r2,r2,r3
   106d4:	8884d83a 	srl	r2,r17,r2
   106d8:	98d0983a 	sll	r8,r19,r3
   106dc:	88e2983a 	sll	r17,r17,r3
   106e0:	1204b03a 	or	r2,r2,r8
   106e4:	1c007416 	blt	r3,r16,108b8 <__adddf3+0x388>
   106e8:	1c21c83a 	sub	r16,r3,r16
   106ec:	82000044 	addi	r8,r16,1
   106f0:	00c007c4 	movi	r3,31
   106f4:	1a009116 	blt	r3,r8,1093c <__adddf3+0x40c>
   106f8:	00c00804 	movi	r3,32
   106fc:	1a07c83a 	sub	r3,r3,r8
   10700:	8a08d83a 	srl	r4,r17,r8
   10704:	88e2983a 	sll	r17,r17,r3
   10708:	10c6983a 	sll	r3,r2,r3
   1070c:	1210d83a 	srl	r8,r2,r8
   10710:	8804c03a 	cmpne	r2,r17,zero
   10714:	1906b03a 	or	r3,r3,r4
   10718:	18a2b03a 	or	r17,r3,r2
   1071c:	0021883a 	mov	r16,zero
   10720:	003fa206 	br	105ac <__alt_data_end+0xffff05ac>
   10724:	1890b03a 	or	r8,r3,r2
   10728:	40017d26 	beq	r8,zero,10d20 <__adddf3+0x7f0>
   1072c:	1011883a 	mov	r8,r2
   10730:	1823883a 	mov	r17,r3
   10734:	888001cc 	andi	r2,r17,7
   10738:	103f9e1e 	bne	r2,zero,105b4 <__alt_data_end+0xffff05b4>
   1073c:	4004977a 	slli	r2,r8,29
   10740:	8822d0fa 	srli	r17,r17,3
   10744:	4010d0fa 	srli	r8,r8,3
   10748:	9007883a 	mov	r3,r18
   1074c:	1444b03a 	or	r2,r2,r17
   10750:	0101ffc4 	movi	r4,2047
   10754:	81002426 	beq	r16,r4,107e8 <__adddf3+0x2b8>
   10758:	8120703a 	and	r16,r16,r4
   1075c:	01000434 	movhi	r4,16
   10760:	213fffc4 	addi	r4,r4,-1
   10764:	4110703a 	and	r8,r8,r4
   10768:	003fa806 	br	1060c <__alt_data_end+0xffff060c>
   1076c:	8089c83a 	sub	r4,r16,r2
   10770:	01005e0e 	bge	zero,r4,108ec <__adddf3+0x3bc>
   10774:	10002b26 	beq	r2,zero,10824 <__adddf3+0x2f4>
   10778:	0081ffc4 	movi	r2,2047
   1077c:	80bf8b26 	beq	r16,r2,105ac <__alt_data_end+0xffff05ac>
   10780:	4a402034 	orhi	r9,r9,128
   10784:	00800e04 	movi	r2,56
   10788:	1100a40e 	bge	r2,r4,10a1c <__adddf3+0x4ec>
   1078c:	498cb03a 	or	r6,r9,r6
   10790:	300ac03a 	cmpne	r5,r6,zero
   10794:	0013883a 	mov	r9,zero
   10798:	2c4b883a 	add	r5,r5,r17
   1079c:	2c63803a 	cmpltu	r17,r5,r17
   107a0:	4a11883a 	add	r8,r9,r8
   107a4:	8a11883a 	add	r8,r17,r8
   107a8:	2823883a 	mov	r17,r5
   107ac:	4080202c 	andhi	r2,r8,128
   107b0:	103fe026 	beq	r2,zero,10734 <__alt_data_end+0xffff0734>
   107b4:	84000044 	addi	r16,r16,1
   107b8:	0081ffc4 	movi	r2,2047
   107bc:	8080d226 	beq	r16,r2,10b08 <__adddf3+0x5d8>
   107c0:	00bfe034 	movhi	r2,65408
   107c4:	10bfffc4 	addi	r2,r2,-1
   107c8:	4090703a 	and	r8,r8,r2
   107cc:	880ad07a 	srli	r5,r17,1
   107d0:	400897fa 	slli	r4,r8,31
   107d4:	88c0004c 	andi	r3,r17,1
   107d8:	28e2b03a 	or	r17,r5,r3
   107dc:	4010d07a 	srli	r8,r8,1
   107e0:	2462b03a 	or	r17,r4,r17
   107e4:	003f7106 	br	105ac <__alt_data_end+0xffff05ac>
   107e8:	4088b03a 	or	r4,r8,r2
   107ec:	20014526 	beq	r4,zero,10d04 <__adddf3+0x7d4>
   107f0:	01000434 	movhi	r4,16
   107f4:	42000234 	orhi	r8,r8,8
   107f8:	213fffc4 	addi	r4,r4,-1
   107fc:	4110703a 	and	r8,r8,r4
   10800:	003f8206 	br	1060c <__alt_data_end+0xffff060c>
   10804:	18ffffc4 	addi	r3,r3,-1
   10808:	1800491e 	bne	r3,zero,10930 <__adddf3+0x400>
   1080c:	898bc83a 	sub	r5,r17,r6
   10810:	8963803a 	cmpltu	r17,r17,r5
   10814:	4251c83a 	sub	r8,r8,r9
   10818:	4451c83a 	sub	r8,r8,r17
   1081c:	2823883a 	mov	r17,r5
   10820:	003f9f06 	br	106a0 <__alt_data_end+0xffff06a0>
   10824:	4984b03a 	or	r2,r9,r6
   10828:	103f6026 	beq	r2,zero,105ac <__alt_data_end+0xffff05ac>
   1082c:	213fffc4 	addi	r4,r4,-1
   10830:	2000931e 	bne	r4,zero,10a80 <__adddf3+0x550>
   10834:	898d883a 	add	r6,r17,r6
   10838:	3463803a 	cmpltu	r17,r6,r17
   1083c:	4251883a 	add	r8,r8,r9
   10840:	8a11883a 	add	r8,r17,r8
   10844:	3023883a 	mov	r17,r6
   10848:	003fd806 	br	107ac <__alt_data_end+0xffff07ac>
   1084c:	1800541e 	bne	r3,zero,109a0 <__adddf3+0x470>
   10850:	80800044 	addi	r2,r16,1
   10854:	1081ffcc 	andi	r2,r2,2047
   10858:	00c00044 	movi	r3,1
   1085c:	1880a00e 	bge	r3,r2,10ae0 <__adddf3+0x5b0>
   10860:	8989c83a 	sub	r4,r17,r6
   10864:	8905803a 	cmpltu	r2,r17,r4
   10868:	4267c83a 	sub	r19,r8,r9
   1086c:	98a7c83a 	sub	r19,r19,r2
   10870:	9880202c 	andhi	r2,r19,128
   10874:	10006326 	beq	r2,zero,10a04 <__adddf3+0x4d4>
   10878:	3463c83a 	sub	r17,r6,r17
   1087c:	4a07c83a 	sub	r3,r9,r8
   10880:	344d803a 	cmpltu	r6,r6,r17
   10884:	19a7c83a 	sub	r19,r3,r6
   10888:	3825883a 	mov	r18,r7
   1088c:	983f8a1e 	bne	r19,zero,106b8 <__alt_data_end+0xffff06b8>
   10890:	8809883a 	mov	r4,r17
   10894:	00117a40 	call	117a4 <__clzsi2>
   10898:	10800804 	addi	r2,r2,32
   1089c:	10fffe04 	addi	r3,r2,-8
   108a0:	010007c4 	movi	r4,31
   108a4:	20ff890e 	bge	r4,r3,106cc <__alt_data_end+0xffff06cc>
   108a8:	10bff604 	addi	r2,r2,-40
   108ac:	8884983a 	sll	r2,r17,r2
   108b0:	0023883a 	mov	r17,zero
   108b4:	1c3f8c0e 	bge	r3,r16,106e8 <__alt_data_end+0xffff06e8>
   108b8:	023fe034 	movhi	r8,65408
   108bc:	423fffc4 	addi	r8,r8,-1
   108c0:	80e1c83a 	sub	r16,r16,r3
   108c4:	1210703a 	and	r8,r2,r8
   108c8:	003f3806 	br	105ac <__alt_data_end+0xffff05ac>
   108cc:	9007883a 	mov	r3,r18
   108d0:	0011883a 	mov	r8,zero
   108d4:	0005883a 	mov	r2,zero
   108d8:	003f4c06 	br	1060c <__alt_data_end+0xffff060c>
   108dc:	498cb03a 	or	r6,r9,r6
   108e0:	300cc03a 	cmpne	r6,r6,zero
   108e4:	0007883a 	mov	r3,zero
   108e8:	003f6806 	br	1068c <__alt_data_end+0xffff068c>
   108ec:	20009c1e 	bne	r4,zero,10b60 <__adddf3+0x630>
   108f0:	80800044 	addi	r2,r16,1
   108f4:	1141ffcc 	andi	r5,r2,2047
   108f8:	01000044 	movi	r4,1
   108fc:	2140670e 	bge	r4,r5,10a9c <__adddf3+0x56c>
   10900:	0101ffc4 	movi	r4,2047
   10904:	11007f26 	beq	r2,r4,10b04 <__adddf3+0x5d4>
   10908:	898d883a 	add	r6,r17,r6
   1090c:	4247883a 	add	r3,r8,r9
   10910:	3451803a 	cmpltu	r8,r6,r17
   10914:	40d1883a 	add	r8,r8,r3
   10918:	402297fa 	slli	r17,r8,31
   1091c:	300cd07a 	srli	r6,r6,1
   10920:	4010d07a 	srli	r8,r8,1
   10924:	1021883a 	mov	r16,r2
   10928:	89a2b03a 	or	r17,r17,r6
   1092c:	003f1f06 	br	105ac <__alt_data_end+0xffff05ac>
   10930:	0081ffc4 	movi	r2,2047
   10934:	80bf481e 	bne	r16,r2,10658 <__alt_data_end+0xffff0658>
   10938:	003f1c06 	br	105ac <__alt_data_end+0xffff05ac>
   1093c:	843ff844 	addi	r16,r16,-31
   10940:	01000804 	movi	r4,32
   10944:	1406d83a 	srl	r3,r2,r16
   10948:	41005026 	beq	r8,r4,10a8c <__adddf3+0x55c>
   1094c:	01001004 	movi	r4,64
   10950:	2211c83a 	sub	r8,r4,r8
   10954:	1204983a 	sll	r2,r2,r8
   10958:	88a2b03a 	or	r17,r17,r2
   1095c:	8822c03a 	cmpne	r17,r17,zero
   10960:	1c62b03a 	or	r17,r3,r17
   10964:	0011883a 	mov	r8,zero
   10968:	0021883a 	mov	r16,zero
   1096c:	003f7106 	br	10734 <__alt_data_end+0xffff0734>
   10970:	193ff804 	addi	r4,r3,-32
   10974:	00800804 	movi	r2,32
   10978:	4908d83a 	srl	r4,r9,r4
   1097c:	18804526 	beq	r3,r2,10a94 <__adddf3+0x564>
   10980:	00801004 	movi	r2,64
   10984:	10c5c83a 	sub	r2,r2,r3
   10988:	4886983a 	sll	r3,r9,r2
   1098c:	198cb03a 	or	r6,r3,r6
   10990:	300cc03a 	cmpne	r6,r6,zero
   10994:	218cb03a 	or	r6,r4,r6
   10998:	0007883a 	mov	r3,zero
   1099c:	003f3b06 	br	1068c <__alt_data_end+0xffff068c>
   109a0:	80002a26 	beq	r16,zero,10a4c <__adddf3+0x51c>
   109a4:	0101ffc4 	movi	r4,2047
   109a8:	11006826 	beq	r2,r4,10b4c <__adddf3+0x61c>
   109ac:	00c7c83a 	sub	r3,zero,r3
   109b0:	42002034 	orhi	r8,r8,128
   109b4:	01000e04 	movi	r4,56
   109b8:	20c07c16 	blt	r4,r3,10bac <__adddf3+0x67c>
   109bc:	010007c4 	movi	r4,31
   109c0:	20c0da16 	blt	r4,r3,10d2c <__adddf3+0x7fc>
   109c4:	01000804 	movi	r4,32
   109c8:	20c9c83a 	sub	r4,r4,r3
   109cc:	4114983a 	sll	r10,r8,r4
   109d0:	88cad83a 	srl	r5,r17,r3
   109d4:	8908983a 	sll	r4,r17,r4
   109d8:	40c6d83a 	srl	r3,r8,r3
   109dc:	5162b03a 	or	r17,r10,r5
   109e0:	2008c03a 	cmpne	r4,r4,zero
   109e4:	8922b03a 	or	r17,r17,r4
   109e8:	3463c83a 	sub	r17,r6,r17
   109ec:	48c7c83a 	sub	r3,r9,r3
   109f0:	344d803a 	cmpltu	r6,r6,r17
   109f4:	1991c83a 	sub	r8,r3,r6
   109f8:	1021883a 	mov	r16,r2
   109fc:	3825883a 	mov	r18,r7
   10a00:	003f2706 	br	106a0 <__alt_data_end+0xffff06a0>
   10a04:	24d0b03a 	or	r8,r4,r19
   10a08:	40001b1e 	bne	r8,zero,10a78 <__adddf3+0x548>
   10a0c:	0005883a 	mov	r2,zero
   10a10:	0007883a 	mov	r3,zero
   10a14:	0021883a 	mov	r16,zero
   10a18:	003f4d06 	br	10750 <__alt_data_end+0xffff0750>
   10a1c:	008007c4 	movi	r2,31
   10a20:	11003c16 	blt	r2,r4,10b14 <__adddf3+0x5e4>
   10a24:	00800804 	movi	r2,32
   10a28:	1105c83a 	sub	r2,r2,r4
   10a2c:	488e983a 	sll	r7,r9,r2
   10a30:	310ad83a 	srl	r5,r6,r4
   10a34:	3084983a 	sll	r2,r6,r2
   10a38:	4912d83a 	srl	r9,r9,r4
   10a3c:	394ab03a 	or	r5,r7,r5
   10a40:	1004c03a 	cmpne	r2,r2,zero
   10a44:	288ab03a 	or	r5,r5,r2
   10a48:	003f5306 	br	10798 <__alt_data_end+0xffff0798>
   10a4c:	4448b03a 	or	r4,r8,r17
   10a50:	20003e26 	beq	r4,zero,10b4c <__adddf3+0x61c>
   10a54:	00c6303a 	nor	r3,zero,r3
   10a58:	18003a1e 	bne	r3,zero,10b44 <__adddf3+0x614>
   10a5c:	3463c83a 	sub	r17,r6,r17
   10a60:	4a07c83a 	sub	r3,r9,r8
   10a64:	344d803a 	cmpltu	r6,r6,r17
   10a68:	1991c83a 	sub	r8,r3,r6
   10a6c:	1021883a 	mov	r16,r2
   10a70:	3825883a 	mov	r18,r7
   10a74:	003f0a06 	br	106a0 <__alt_data_end+0xffff06a0>
   10a78:	2023883a 	mov	r17,r4
   10a7c:	003f0d06 	br	106b4 <__alt_data_end+0xffff06b4>
   10a80:	0081ffc4 	movi	r2,2047
   10a84:	80bf3f1e 	bne	r16,r2,10784 <__alt_data_end+0xffff0784>
   10a88:	003ec806 	br	105ac <__alt_data_end+0xffff05ac>
   10a8c:	0005883a 	mov	r2,zero
   10a90:	003fb106 	br	10958 <__alt_data_end+0xffff0958>
   10a94:	0007883a 	mov	r3,zero
   10a98:	003fbc06 	br	1098c <__alt_data_end+0xffff098c>
   10a9c:	4444b03a 	or	r2,r8,r17
   10aa0:	8000871e 	bne	r16,zero,10cc0 <__adddf3+0x790>
   10aa4:	1000ba26 	beq	r2,zero,10d90 <__adddf3+0x860>
   10aa8:	4984b03a 	or	r2,r9,r6
   10aac:	103ebf26 	beq	r2,zero,105ac <__alt_data_end+0xffff05ac>
   10ab0:	8985883a 	add	r2,r17,r6
   10ab4:	4247883a 	add	r3,r8,r9
   10ab8:	1451803a 	cmpltu	r8,r2,r17
   10abc:	40d1883a 	add	r8,r8,r3
   10ac0:	40c0202c 	andhi	r3,r8,128
   10ac4:	1023883a 	mov	r17,r2
   10ac8:	183f1a26 	beq	r3,zero,10734 <__alt_data_end+0xffff0734>
   10acc:	00bfe034 	movhi	r2,65408
   10ad0:	10bfffc4 	addi	r2,r2,-1
   10ad4:	2021883a 	mov	r16,r4
   10ad8:	4090703a 	and	r8,r8,r2
   10adc:	003eb306 	br	105ac <__alt_data_end+0xffff05ac>
   10ae0:	4444b03a 	or	r2,r8,r17
   10ae4:	8000291e 	bne	r16,zero,10b8c <__adddf3+0x65c>
   10ae8:	10004b1e 	bne	r2,zero,10c18 <__adddf3+0x6e8>
   10aec:	4990b03a 	or	r8,r9,r6
   10af0:	40008b26 	beq	r8,zero,10d20 <__adddf3+0x7f0>
   10af4:	4811883a 	mov	r8,r9
   10af8:	3023883a 	mov	r17,r6
   10afc:	3825883a 	mov	r18,r7
   10b00:	003eaa06 	br	105ac <__alt_data_end+0xffff05ac>
   10b04:	1021883a 	mov	r16,r2
   10b08:	0011883a 	mov	r8,zero
   10b0c:	0005883a 	mov	r2,zero
   10b10:	003f0f06 	br	10750 <__alt_data_end+0xffff0750>
   10b14:	217ff804 	addi	r5,r4,-32
   10b18:	00800804 	movi	r2,32
   10b1c:	494ad83a 	srl	r5,r9,r5
   10b20:	20807d26 	beq	r4,r2,10d18 <__adddf3+0x7e8>
   10b24:	00801004 	movi	r2,64
   10b28:	1109c83a 	sub	r4,r2,r4
   10b2c:	4912983a 	sll	r9,r9,r4
   10b30:	498cb03a 	or	r6,r9,r6
   10b34:	300cc03a 	cmpne	r6,r6,zero
   10b38:	298ab03a 	or	r5,r5,r6
   10b3c:	0013883a 	mov	r9,zero
   10b40:	003f1506 	br	10798 <__alt_data_end+0xffff0798>
   10b44:	0101ffc4 	movi	r4,2047
   10b48:	113f9a1e 	bne	r2,r4,109b4 <__alt_data_end+0xffff09b4>
   10b4c:	4811883a 	mov	r8,r9
   10b50:	3023883a 	mov	r17,r6
   10b54:	1021883a 	mov	r16,r2
   10b58:	3825883a 	mov	r18,r7
   10b5c:	003e9306 	br	105ac <__alt_data_end+0xffff05ac>
   10b60:	8000161e 	bne	r16,zero,10bbc <__adddf3+0x68c>
   10b64:	444ab03a 	or	r5,r8,r17
   10b68:	28005126 	beq	r5,zero,10cb0 <__adddf3+0x780>
   10b6c:	0108303a 	nor	r4,zero,r4
   10b70:	20004d1e 	bne	r4,zero,10ca8 <__adddf3+0x778>
   10b74:	89a3883a 	add	r17,r17,r6
   10b78:	4253883a 	add	r9,r8,r9
   10b7c:	898d803a 	cmpltu	r6,r17,r6
   10b80:	3251883a 	add	r8,r6,r9
   10b84:	1021883a 	mov	r16,r2
   10b88:	003f0806 	br	107ac <__alt_data_end+0xffff07ac>
   10b8c:	1000301e 	bne	r2,zero,10c50 <__adddf3+0x720>
   10b90:	4984b03a 	or	r2,r9,r6
   10b94:	10007126 	beq	r2,zero,10d5c <__adddf3+0x82c>
   10b98:	4811883a 	mov	r8,r9
   10b9c:	3023883a 	mov	r17,r6
   10ba0:	3825883a 	mov	r18,r7
   10ba4:	0401ffc4 	movi	r16,2047
   10ba8:	003e8006 	br	105ac <__alt_data_end+0xffff05ac>
   10bac:	4462b03a 	or	r17,r8,r17
   10bb0:	8822c03a 	cmpne	r17,r17,zero
   10bb4:	0007883a 	mov	r3,zero
   10bb8:	003f8b06 	br	109e8 <__alt_data_end+0xffff09e8>
   10bbc:	0141ffc4 	movi	r5,2047
   10bc0:	11403b26 	beq	r2,r5,10cb0 <__adddf3+0x780>
   10bc4:	0109c83a 	sub	r4,zero,r4
   10bc8:	42002034 	orhi	r8,r8,128
   10bcc:	01400e04 	movi	r5,56
   10bd0:	29006716 	blt	r5,r4,10d70 <__adddf3+0x840>
   10bd4:	014007c4 	movi	r5,31
   10bd8:	29007016 	blt	r5,r4,10d9c <__adddf3+0x86c>
   10bdc:	01400804 	movi	r5,32
   10be0:	290bc83a 	sub	r5,r5,r4
   10be4:	4154983a 	sll	r10,r8,r5
   10be8:	890ed83a 	srl	r7,r17,r4
   10bec:	894a983a 	sll	r5,r17,r5
   10bf0:	4108d83a 	srl	r4,r8,r4
   10bf4:	51e2b03a 	or	r17,r10,r7
   10bf8:	280ac03a 	cmpne	r5,r5,zero
   10bfc:	8962b03a 	or	r17,r17,r5
   10c00:	89a3883a 	add	r17,r17,r6
   10c04:	2253883a 	add	r9,r4,r9
   10c08:	898d803a 	cmpltu	r6,r17,r6
   10c0c:	3251883a 	add	r8,r6,r9
   10c10:	1021883a 	mov	r16,r2
   10c14:	003ee506 	br	107ac <__alt_data_end+0xffff07ac>
   10c18:	4984b03a 	or	r2,r9,r6
   10c1c:	103e6326 	beq	r2,zero,105ac <__alt_data_end+0xffff05ac>
   10c20:	8987c83a 	sub	r3,r17,r6
   10c24:	88c9803a 	cmpltu	r4,r17,r3
   10c28:	4245c83a 	sub	r2,r8,r9
   10c2c:	1105c83a 	sub	r2,r2,r4
   10c30:	1100202c 	andhi	r4,r2,128
   10c34:	203ebb26 	beq	r4,zero,10724 <__alt_data_end+0xffff0724>
   10c38:	3463c83a 	sub	r17,r6,r17
   10c3c:	4a07c83a 	sub	r3,r9,r8
   10c40:	344d803a 	cmpltu	r6,r6,r17
   10c44:	1991c83a 	sub	r8,r3,r6
   10c48:	3825883a 	mov	r18,r7
   10c4c:	003e5706 	br	105ac <__alt_data_end+0xffff05ac>
   10c50:	4984b03a 	or	r2,r9,r6
   10c54:	10002e26 	beq	r2,zero,10d10 <__adddf3+0x7e0>
   10c58:	4004d0fa 	srli	r2,r8,3
   10c5c:	8822d0fa 	srli	r17,r17,3
   10c60:	4010977a 	slli	r8,r8,29
   10c64:	10c0022c 	andhi	r3,r2,8
   10c68:	4462b03a 	or	r17,r8,r17
   10c6c:	18000826 	beq	r3,zero,10c90 <__adddf3+0x760>
   10c70:	4808d0fa 	srli	r4,r9,3
   10c74:	20c0022c 	andhi	r3,r4,8
   10c78:	1800051e 	bne	r3,zero,10c90 <__adddf3+0x760>
   10c7c:	300cd0fa 	srli	r6,r6,3
   10c80:	4806977a 	slli	r3,r9,29
   10c84:	2005883a 	mov	r2,r4
   10c88:	3825883a 	mov	r18,r7
   10c8c:	19a2b03a 	or	r17,r3,r6
   10c90:	8810d77a 	srli	r8,r17,29
   10c94:	100490fa 	slli	r2,r2,3
   10c98:	882290fa 	slli	r17,r17,3
   10c9c:	0401ffc4 	movi	r16,2047
   10ca0:	4090b03a 	or	r8,r8,r2
   10ca4:	003e4106 	br	105ac <__alt_data_end+0xffff05ac>
   10ca8:	0141ffc4 	movi	r5,2047
   10cac:	117fc71e 	bne	r2,r5,10bcc <__alt_data_end+0xffff0bcc>
   10cb0:	4811883a 	mov	r8,r9
   10cb4:	3023883a 	mov	r17,r6
   10cb8:	1021883a 	mov	r16,r2
   10cbc:	003e3b06 	br	105ac <__alt_data_end+0xffff05ac>
   10cc0:	10002f26 	beq	r2,zero,10d80 <__adddf3+0x850>
   10cc4:	4984b03a 	or	r2,r9,r6
   10cc8:	10001126 	beq	r2,zero,10d10 <__adddf3+0x7e0>
   10ccc:	4004d0fa 	srli	r2,r8,3
   10cd0:	8822d0fa 	srli	r17,r17,3
   10cd4:	4010977a 	slli	r8,r8,29
   10cd8:	10c0022c 	andhi	r3,r2,8
   10cdc:	4462b03a 	or	r17,r8,r17
   10ce0:	183feb26 	beq	r3,zero,10c90 <__alt_data_end+0xffff0c90>
   10ce4:	4808d0fa 	srli	r4,r9,3
   10ce8:	20c0022c 	andhi	r3,r4,8
   10cec:	183fe81e 	bne	r3,zero,10c90 <__alt_data_end+0xffff0c90>
   10cf0:	300cd0fa 	srli	r6,r6,3
   10cf4:	4806977a 	slli	r3,r9,29
   10cf8:	2005883a 	mov	r2,r4
   10cfc:	19a2b03a 	or	r17,r3,r6
   10d00:	003fe306 	br	10c90 <__alt_data_end+0xffff0c90>
   10d04:	0011883a 	mov	r8,zero
   10d08:	0005883a 	mov	r2,zero
   10d0c:	003e3f06 	br	1060c <__alt_data_end+0xffff060c>
   10d10:	0401ffc4 	movi	r16,2047
   10d14:	003e2506 	br	105ac <__alt_data_end+0xffff05ac>
   10d18:	0013883a 	mov	r9,zero
   10d1c:	003f8406 	br	10b30 <__alt_data_end+0xffff0b30>
   10d20:	0005883a 	mov	r2,zero
   10d24:	0007883a 	mov	r3,zero
   10d28:	003e8906 	br	10750 <__alt_data_end+0xffff0750>
   10d2c:	197ff804 	addi	r5,r3,-32
   10d30:	01000804 	movi	r4,32
   10d34:	414ad83a 	srl	r5,r8,r5
   10d38:	19002426 	beq	r3,r4,10dcc <__adddf3+0x89c>
   10d3c:	01001004 	movi	r4,64
   10d40:	20c7c83a 	sub	r3,r4,r3
   10d44:	40c6983a 	sll	r3,r8,r3
   10d48:	1c46b03a 	or	r3,r3,r17
   10d4c:	1806c03a 	cmpne	r3,r3,zero
   10d50:	28e2b03a 	or	r17,r5,r3
   10d54:	0007883a 	mov	r3,zero
   10d58:	003f2306 	br	109e8 <__alt_data_end+0xffff09e8>
   10d5c:	0007883a 	mov	r3,zero
   10d60:	5811883a 	mov	r8,r11
   10d64:	00bfffc4 	movi	r2,-1
   10d68:	0401ffc4 	movi	r16,2047
   10d6c:	003e7806 	br	10750 <__alt_data_end+0xffff0750>
   10d70:	4462b03a 	or	r17,r8,r17
   10d74:	8822c03a 	cmpne	r17,r17,zero
   10d78:	0009883a 	mov	r4,zero
   10d7c:	003fa006 	br	10c00 <__alt_data_end+0xffff0c00>
   10d80:	4811883a 	mov	r8,r9
   10d84:	3023883a 	mov	r17,r6
   10d88:	0401ffc4 	movi	r16,2047
   10d8c:	003e0706 	br	105ac <__alt_data_end+0xffff05ac>
   10d90:	4811883a 	mov	r8,r9
   10d94:	3023883a 	mov	r17,r6
   10d98:	003e0406 	br	105ac <__alt_data_end+0xffff05ac>
   10d9c:	21fff804 	addi	r7,r4,-32
   10da0:	01400804 	movi	r5,32
   10da4:	41ced83a 	srl	r7,r8,r7
   10da8:	21400a26 	beq	r4,r5,10dd4 <__adddf3+0x8a4>
   10dac:	01401004 	movi	r5,64
   10db0:	2909c83a 	sub	r4,r5,r4
   10db4:	4108983a 	sll	r4,r8,r4
   10db8:	2448b03a 	or	r4,r4,r17
   10dbc:	2008c03a 	cmpne	r4,r4,zero
   10dc0:	3922b03a 	or	r17,r7,r4
   10dc4:	0009883a 	mov	r4,zero
   10dc8:	003f8d06 	br	10c00 <__alt_data_end+0xffff0c00>
   10dcc:	0007883a 	mov	r3,zero
   10dd0:	003fdd06 	br	10d48 <__alt_data_end+0xffff0d48>
   10dd4:	0009883a 	mov	r4,zero
   10dd8:	003ff706 	br	10db8 <__alt_data_end+0xffff0db8>

00010ddc <__muldf3>:
   10ddc:	deffee04 	addi	sp,sp,-72
   10de0:	dd000c15 	stw	r20,48(sp)
   10de4:	2828d53a 	srli	r20,r5,20
   10de8:	ddc00f15 	stw	r23,60(sp)
   10dec:	282ed7fa 	srli	r23,r5,31
   10df0:	dc000815 	stw	r16,32(sp)
   10df4:	04000434 	movhi	r16,16
   10df8:	dcc00b15 	stw	r19,44(sp)
   10dfc:	843fffc4 	addi	r16,r16,-1
   10e00:	dfc01115 	stw	ra,68(sp)
   10e04:	df001015 	stw	fp,64(sp)
   10e08:	dd800e15 	stw	r22,56(sp)
   10e0c:	dd400d15 	stw	r21,52(sp)
   10e10:	dc800a15 	stw	r18,40(sp)
   10e14:	dc400915 	stw	r17,36(sp)
   10e18:	a501ffcc 	andi	r20,r20,2047
   10e1c:	2c20703a 	and	r16,r5,r16
   10e20:	b827883a 	mov	r19,r23
   10e24:	ba403fcc 	andi	r9,r23,255
   10e28:	a0006026 	beq	r20,zero,10fac <__muldf3+0x1d0>
   10e2c:	0081ffc4 	movi	r2,2047
   10e30:	202d883a 	mov	r22,r4
   10e34:	a0803626 	beq	r20,r2,10f10 <__muldf3+0x134>
   10e38:	84000434 	orhi	r16,r16,16
   10e3c:	200ad77a 	srli	r5,r4,29
   10e40:	800490fa 	slli	r2,r16,3
   10e44:	202c90fa 	slli	r22,r4,3
   10e48:	a53f0044 	addi	r20,r20,-1023
   10e4c:	28a0b03a 	or	r16,r5,r2
   10e50:	002b883a 	mov	r21,zero
   10e54:	000b883a 	mov	r5,zero
   10e58:	3804d53a 	srli	r2,r7,20
   10e5c:	3838d7fa 	srli	fp,r7,31
   10e60:	04400434 	movhi	r17,16
   10e64:	8c7fffc4 	addi	r17,r17,-1
   10e68:	1081ffcc 	andi	r2,r2,2047
   10e6c:	3025883a 	mov	r18,r6
   10e70:	3c62703a 	and	r17,r7,r17
   10e74:	e2803fcc 	andi	r10,fp,255
   10e78:	10006d26 	beq	r2,zero,11030 <__muldf3+0x254>
   10e7c:	00c1ffc4 	movi	r3,2047
   10e80:	10c06526 	beq	r2,r3,11018 <__muldf3+0x23c>
   10e84:	8c400434 	orhi	r17,r17,16
   10e88:	300ed77a 	srli	r7,r6,29
   10e8c:	880690fa 	slli	r3,r17,3
   10e90:	302490fa 	slli	r18,r6,3
   10e94:	10bf0044 	addi	r2,r2,-1023
   10e98:	38e2b03a 	or	r17,r7,r3
   10e9c:	000f883a 	mov	r7,zero
   10ea0:	a087883a 	add	r3,r20,r2
   10ea4:	010003c4 	movi	r4,15
   10ea8:	3d44b03a 	or	r2,r7,r21
   10eac:	e5ccf03a 	xor	r6,fp,r23
   10eb0:	1a000044 	addi	r8,r3,1
   10eb4:	20809b36 	bltu	r4,r2,11124 <__muldf3+0x348>
   10eb8:	100490ba 	slli	r2,r2,2
   10ebc:	01000074 	movhi	r4,1
   10ec0:	2103b404 	addi	r4,r4,3792
   10ec4:	1105883a 	add	r2,r2,r4
   10ec8:	10800017 	ldw	r2,0(r2)
   10ecc:	1000683a 	jmp	r2
   10ed0:	00011124 	muli	zero,zero,1092
   10ed4:	00010f30 	cmpltui	zero,zero,1084
   10ed8:	00010f30 	cmpltui	zero,zero,1084
   10edc:	00010f2c 	andhi	zero,zero,1084
   10ee0:	00011100 	call	1110 <__alt_mem_onchip_memory-0xeef0>
   10ee4:	00011100 	call	1110 <__alt_mem_onchip_memory-0xeef0>
   10ee8:	000110e8 	cmpgeui	zero,zero,1091
   10eec:	00010f2c 	andhi	zero,zero,1084
   10ef0:	00011100 	call	1110 <__alt_mem_onchip_memory-0xeef0>
   10ef4:	000110e8 	cmpgeui	zero,zero,1091
   10ef8:	00011100 	call	1110 <__alt_mem_onchip_memory-0xeef0>
   10efc:	00010f2c 	andhi	zero,zero,1084
   10f00:	00011110 	cmplti	zero,zero,1092
   10f04:	00011110 	cmplti	zero,zero,1092
   10f08:	00011110 	cmplti	zero,zero,1092
   10f0c:	00011470 	cmpltui	zero,zero,1105
   10f10:	2404b03a 	or	r2,r4,r16
   10f14:	1000711e 	bne	r2,zero,110dc <__muldf3+0x300>
   10f18:	05400204 	movi	r21,8
   10f1c:	0021883a 	mov	r16,zero
   10f20:	002d883a 	mov	r22,zero
   10f24:	01400084 	movi	r5,2
   10f28:	003fcb06 	br	10e58 <__alt_data_end+0xffff0e58>
   10f2c:	500d883a 	mov	r6,r10
   10f30:	00800084 	movi	r2,2
   10f34:	38805926 	beq	r7,r2,1109c <__muldf3+0x2c0>
   10f38:	008000c4 	movi	r2,3
   10f3c:	3881bb26 	beq	r7,r2,1162c <__muldf3+0x850>
   10f40:	00800044 	movi	r2,1
   10f44:	3881961e 	bne	r7,r2,115a0 <__muldf3+0x7c4>
   10f48:	3027883a 	mov	r19,r6
   10f4c:	0005883a 	mov	r2,zero
   10f50:	0021883a 	mov	r16,zero
   10f54:	002d883a 	mov	r22,zero
   10f58:	1004953a 	slli	r2,r2,20
   10f5c:	98c03fcc 	andi	r3,r19,255
   10f60:	04400434 	movhi	r17,16
   10f64:	8c7fffc4 	addi	r17,r17,-1
   10f68:	180697fa 	slli	r3,r3,31
   10f6c:	8460703a 	and	r16,r16,r17
   10f70:	80a0b03a 	or	r16,r16,r2
   10f74:	80c6b03a 	or	r3,r16,r3
   10f78:	b005883a 	mov	r2,r22
   10f7c:	dfc01117 	ldw	ra,68(sp)
   10f80:	df001017 	ldw	fp,64(sp)
   10f84:	ddc00f17 	ldw	r23,60(sp)
   10f88:	dd800e17 	ldw	r22,56(sp)
   10f8c:	dd400d17 	ldw	r21,52(sp)
   10f90:	dd000c17 	ldw	r20,48(sp)
   10f94:	dcc00b17 	ldw	r19,44(sp)
   10f98:	dc800a17 	ldw	r18,40(sp)
   10f9c:	dc400917 	ldw	r17,36(sp)
   10fa0:	dc000817 	ldw	r16,32(sp)
   10fa4:	dec01204 	addi	sp,sp,72
   10fa8:	f800283a 	ret
   10fac:	2404b03a 	or	r2,r4,r16
   10fb0:	202b883a 	mov	r21,r4
   10fb4:	10004426 	beq	r2,zero,110c8 <__muldf3+0x2ec>
   10fb8:	80015126 	beq	r16,zero,11500 <__muldf3+0x724>
   10fbc:	8009883a 	mov	r4,r16
   10fc0:	d9800715 	stw	r6,28(sp)
   10fc4:	d9c00215 	stw	r7,8(sp)
   10fc8:	da400415 	stw	r9,16(sp)
   10fcc:	00117a40 	call	117a4 <__clzsi2>
   10fd0:	d9800717 	ldw	r6,28(sp)
   10fd4:	d9c00217 	ldw	r7,8(sp)
   10fd8:	da400417 	ldw	r9,16(sp)
   10fdc:	113ffd44 	addi	r4,r2,-11
   10fe0:	00c00704 	movi	r3,28
   10fe4:	19014216 	blt	r3,r4,114f0 <__muldf3+0x714>
   10fe8:	00c00744 	movi	r3,29
   10fec:	15bffe04 	addi	r22,r2,-8
   10ff0:	1907c83a 	sub	r3,r3,r4
   10ff4:	85a0983a 	sll	r16,r16,r22
   10ff8:	a8c6d83a 	srl	r3,r21,r3
   10ffc:	adac983a 	sll	r22,r21,r22
   11000:	1c20b03a 	or	r16,r3,r16
   11004:	1080fcc4 	addi	r2,r2,1011
   11008:	00a9c83a 	sub	r20,zero,r2
   1100c:	002b883a 	mov	r21,zero
   11010:	000b883a 	mov	r5,zero
   11014:	003f9006 	br	10e58 <__alt_data_end+0xffff0e58>
   11018:	3446b03a 	or	r3,r6,r17
   1101c:	1800281e 	bne	r3,zero,110c0 <__muldf3+0x2e4>
   11020:	0023883a 	mov	r17,zero
   11024:	0025883a 	mov	r18,zero
   11028:	01c00084 	movi	r7,2
   1102c:	003f9c06 	br	10ea0 <__alt_data_end+0xffff0ea0>
   11030:	3446b03a 	or	r3,r6,r17
   11034:	18001e26 	beq	r3,zero,110b0 <__muldf3+0x2d4>
   11038:	88012126 	beq	r17,zero,114c0 <__muldf3+0x6e4>
   1103c:	8809883a 	mov	r4,r17
   11040:	d9400215 	stw	r5,8(sp)
   11044:	d9800715 	stw	r6,28(sp)
   11048:	da400415 	stw	r9,16(sp)
   1104c:	da800315 	stw	r10,12(sp)
   11050:	00117a40 	call	117a4 <__clzsi2>
   11054:	d9400217 	ldw	r5,8(sp)
   11058:	d9800717 	ldw	r6,28(sp)
   1105c:	da400417 	ldw	r9,16(sp)
   11060:	da800317 	ldw	r10,12(sp)
   11064:	113ffd44 	addi	r4,r2,-11
   11068:	00c00704 	movi	r3,28
   1106c:	19011016 	blt	r3,r4,114b0 <__muldf3+0x6d4>
   11070:	00c00744 	movi	r3,29
   11074:	14bffe04 	addi	r18,r2,-8
   11078:	1907c83a 	sub	r3,r3,r4
   1107c:	8ca2983a 	sll	r17,r17,r18
   11080:	30c6d83a 	srl	r3,r6,r3
   11084:	34a4983a 	sll	r18,r6,r18
   11088:	1c62b03a 	or	r17,r3,r17
   1108c:	1080fcc4 	addi	r2,r2,1011
   11090:	0085c83a 	sub	r2,zero,r2
   11094:	000f883a 	mov	r7,zero
   11098:	003f8106 	br	10ea0 <__alt_data_end+0xffff0ea0>
   1109c:	3027883a 	mov	r19,r6
   110a0:	0081ffc4 	movi	r2,2047
   110a4:	0021883a 	mov	r16,zero
   110a8:	002d883a 	mov	r22,zero
   110ac:	003faa06 	br	10f58 <__alt_data_end+0xffff0f58>
   110b0:	0023883a 	mov	r17,zero
   110b4:	0025883a 	mov	r18,zero
   110b8:	01c00044 	movi	r7,1
   110bc:	003f7806 	br	10ea0 <__alt_data_end+0xffff0ea0>
   110c0:	01c000c4 	movi	r7,3
   110c4:	003f7606 	br	10ea0 <__alt_data_end+0xffff0ea0>
   110c8:	05400104 	movi	r21,4
   110cc:	0021883a 	mov	r16,zero
   110d0:	002d883a 	mov	r22,zero
   110d4:	01400044 	movi	r5,1
   110d8:	003f5f06 	br	10e58 <__alt_data_end+0xffff0e58>
   110dc:	05400304 	movi	r21,12
   110e0:	014000c4 	movi	r5,3
   110e4:	003f5c06 	br	10e58 <__alt_data_end+0xffff0e58>
   110e8:	04000434 	movhi	r16,16
   110ec:	0027883a 	mov	r19,zero
   110f0:	843fffc4 	addi	r16,r16,-1
   110f4:	05bfffc4 	movi	r22,-1
   110f8:	0081ffc4 	movi	r2,2047
   110fc:	003f9606 	br	10f58 <__alt_data_end+0xffff0f58>
   11100:	8023883a 	mov	r17,r16
   11104:	b025883a 	mov	r18,r22
   11108:	280f883a 	mov	r7,r5
   1110c:	003f8806 	br	10f30 <__alt_data_end+0xffff0f30>
   11110:	8023883a 	mov	r17,r16
   11114:	b025883a 	mov	r18,r22
   11118:	480d883a 	mov	r6,r9
   1111c:	280f883a 	mov	r7,r5
   11120:	003f8306 	br	10f30 <__alt_data_end+0xffff0f30>
   11124:	b026d43a 	srli	r19,r22,16
   11128:	902ed43a 	srli	r23,r18,16
   1112c:	b5bfffcc 	andi	r22,r22,65535
   11130:	94bfffcc 	andi	r18,r18,65535
   11134:	b00b883a 	mov	r5,r22
   11138:	9009883a 	mov	r4,r18
   1113c:	d8c00515 	stw	r3,20(sp)
   11140:	d9800715 	stw	r6,28(sp)
   11144:	da000615 	stw	r8,24(sp)
   11148:	00118080 	call	11808 <__mulsi3>
   1114c:	980b883a 	mov	r5,r19
   11150:	9009883a 	mov	r4,r18
   11154:	1029883a 	mov	r20,r2
   11158:	00118080 	call	11808 <__mulsi3>
   1115c:	b80b883a 	mov	r5,r23
   11160:	9809883a 	mov	r4,r19
   11164:	102b883a 	mov	r21,r2
   11168:	00118080 	call	11808 <__mulsi3>
   1116c:	b809883a 	mov	r4,r23
   11170:	b00b883a 	mov	r5,r22
   11174:	1039883a 	mov	fp,r2
   11178:	00118080 	call	11808 <__mulsi3>
   1117c:	a008d43a 	srli	r4,r20,16
   11180:	1545883a 	add	r2,r2,r21
   11184:	d8c00517 	ldw	r3,20(sp)
   11188:	2085883a 	add	r2,r4,r2
   1118c:	d9800717 	ldw	r6,28(sp)
   11190:	da000617 	ldw	r8,24(sp)
   11194:	1540022e 	bgeu	r2,r21,111a0 <__muldf3+0x3c4>
   11198:	01000074 	movhi	r4,1
   1119c:	e139883a 	add	fp,fp,r4
   111a0:	100e943a 	slli	r7,r2,16
   111a4:	1004d43a 	srli	r2,r2,16
   111a8:	882ad43a 	srli	r21,r17,16
   111ac:	a53fffcc 	andi	r20,r20,65535
   111b0:	8c7fffcc 	andi	r17,r17,65535
   111b4:	3d29883a 	add	r20,r7,r20
   111b8:	b00b883a 	mov	r5,r22
   111bc:	8809883a 	mov	r4,r17
   111c0:	d8c00515 	stw	r3,20(sp)
   111c4:	d9800715 	stw	r6,28(sp)
   111c8:	da000615 	stw	r8,24(sp)
   111cc:	dd000115 	stw	r20,4(sp)
   111d0:	d8800015 	stw	r2,0(sp)
   111d4:	00118080 	call	11808 <__mulsi3>
   111d8:	980b883a 	mov	r5,r19
   111dc:	8809883a 	mov	r4,r17
   111e0:	d8800215 	stw	r2,8(sp)
   111e4:	00118080 	call	11808 <__mulsi3>
   111e8:	9809883a 	mov	r4,r19
   111ec:	a80b883a 	mov	r5,r21
   111f0:	1029883a 	mov	r20,r2
   111f4:	00118080 	call	11808 <__mulsi3>
   111f8:	b00b883a 	mov	r5,r22
   111fc:	a809883a 	mov	r4,r21
   11200:	d8800415 	stw	r2,16(sp)
   11204:	00118080 	call	11808 <__mulsi3>
   11208:	d9c00217 	ldw	r7,8(sp)
   1120c:	1505883a 	add	r2,r2,r20
   11210:	d8c00517 	ldw	r3,20(sp)
   11214:	3826d43a 	srli	r19,r7,16
   11218:	d9800717 	ldw	r6,28(sp)
   1121c:	da000617 	ldw	r8,24(sp)
   11220:	9885883a 	add	r2,r19,r2
   11224:	da400417 	ldw	r9,16(sp)
   11228:	1500022e 	bgeu	r2,r20,11234 <__muldf3+0x458>
   1122c:	01000074 	movhi	r4,1
   11230:	4913883a 	add	r9,r9,r4
   11234:	1028d43a 	srli	r20,r2,16
   11238:	1004943a 	slli	r2,r2,16
   1123c:	802cd43a 	srli	r22,r16,16
   11240:	843fffcc 	andi	r16,r16,65535
   11244:	3cffffcc 	andi	r19,r7,65535
   11248:	9009883a 	mov	r4,r18
   1124c:	800b883a 	mov	r5,r16
   11250:	a269883a 	add	r20,r20,r9
   11254:	d8c00515 	stw	r3,20(sp)
   11258:	d9800715 	stw	r6,28(sp)
   1125c:	da000615 	stw	r8,24(sp)
   11260:	14e7883a 	add	r19,r2,r19
   11264:	00118080 	call	11808 <__mulsi3>
   11268:	9009883a 	mov	r4,r18
   1126c:	b00b883a 	mov	r5,r22
   11270:	d8800315 	stw	r2,12(sp)
   11274:	00118080 	call	11808 <__mulsi3>
   11278:	b809883a 	mov	r4,r23
   1127c:	b00b883a 	mov	r5,r22
   11280:	d8800215 	stw	r2,8(sp)
   11284:	00118080 	call	11808 <__mulsi3>
   11288:	b80b883a 	mov	r5,r23
   1128c:	8009883a 	mov	r4,r16
   11290:	d8800415 	stw	r2,16(sp)
   11294:	00118080 	call	11808 <__mulsi3>
   11298:	da800317 	ldw	r10,12(sp)
   1129c:	d9c00217 	ldw	r7,8(sp)
   112a0:	d9000017 	ldw	r4,0(sp)
   112a4:	502ed43a 	srli	r23,r10,16
   112a8:	11c5883a 	add	r2,r2,r7
   112ac:	24e5883a 	add	r18,r4,r19
   112b0:	b885883a 	add	r2,r23,r2
   112b4:	d8c00517 	ldw	r3,20(sp)
   112b8:	d9800717 	ldw	r6,28(sp)
   112bc:	da000617 	ldw	r8,24(sp)
   112c0:	da400417 	ldw	r9,16(sp)
   112c4:	11c0022e 	bgeu	r2,r7,112d0 <__muldf3+0x4f4>
   112c8:	01000074 	movhi	r4,1
   112cc:	4913883a 	add	r9,r9,r4
   112d0:	100ed43a 	srli	r7,r2,16
   112d4:	1004943a 	slli	r2,r2,16
   112d8:	55ffffcc 	andi	r23,r10,65535
   112dc:	3a53883a 	add	r9,r7,r9
   112e0:	8809883a 	mov	r4,r17
   112e4:	800b883a 	mov	r5,r16
   112e8:	d8c00515 	stw	r3,20(sp)
   112ec:	d9800715 	stw	r6,28(sp)
   112f0:	da000615 	stw	r8,24(sp)
   112f4:	da400415 	stw	r9,16(sp)
   112f8:	15ef883a 	add	r23,r2,r23
   112fc:	00118080 	call	11808 <__mulsi3>
   11300:	8809883a 	mov	r4,r17
   11304:	b00b883a 	mov	r5,r22
   11308:	d8800215 	stw	r2,8(sp)
   1130c:	00118080 	call	11808 <__mulsi3>
   11310:	b00b883a 	mov	r5,r22
   11314:	a809883a 	mov	r4,r21
   11318:	d8800315 	stw	r2,12(sp)
   1131c:	00118080 	call	11808 <__mulsi3>
   11320:	8009883a 	mov	r4,r16
   11324:	a80b883a 	mov	r5,r21
   11328:	1023883a 	mov	r17,r2
   1132c:	00118080 	call	11808 <__mulsi3>
   11330:	d9c00217 	ldw	r7,8(sp)
   11334:	da800317 	ldw	r10,12(sp)
   11338:	d8c00517 	ldw	r3,20(sp)
   1133c:	3808d43a 	srli	r4,r7,16
   11340:	1285883a 	add	r2,r2,r10
   11344:	d9800717 	ldw	r6,28(sp)
   11348:	2085883a 	add	r2,r4,r2
   1134c:	da000617 	ldw	r8,24(sp)
   11350:	da400417 	ldw	r9,16(sp)
   11354:	1280022e 	bgeu	r2,r10,11360 <__muldf3+0x584>
   11358:	01000074 	movhi	r4,1
   1135c:	8923883a 	add	r17,r17,r4
   11360:	1008943a 	slli	r4,r2,16
   11364:	39ffffcc 	andi	r7,r7,65535
   11368:	e4b9883a 	add	fp,fp,r18
   1136c:	21cf883a 	add	r7,r4,r7
   11370:	e4e7803a 	cmpltu	r19,fp,r19
   11374:	3d0f883a 	add	r7,r7,r20
   11378:	bf39883a 	add	fp,r23,fp
   1137c:	99c9883a 	add	r4,r19,r7
   11380:	e5ef803a 	cmpltu	r23,fp,r23
   11384:	490b883a 	add	r5,r9,r4
   11388:	1004d43a 	srli	r2,r2,16
   1138c:	b965883a 	add	r18,r23,r5
   11390:	24c9803a 	cmpltu	r4,r4,r19
   11394:	3d29803a 	cmpltu	r20,r7,r20
   11398:	a128b03a 	or	r20,r20,r4
   1139c:	95ef803a 	cmpltu	r23,r18,r23
   113a0:	2a53803a 	cmpltu	r9,r5,r9
   113a4:	a0a9883a 	add	r20,r20,r2
   113a8:	4deeb03a 	or	r23,r9,r23
   113ac:	a5ef883a 	add	r23,r20,r23
   113b0:	bc63883a 	add	r17,r23,r17
   113b4:	e004927a 	slli	r2,fp,9
   113b8:	d9000117 	ldw	r4,4(sp)
   113bc:	882e927a 	slli	r23,r17,9
   113c0:	9022d5fa 	srli	r17,r18,23
   113c4:	e038d5fa 	srli	fp,fp,23
   113c8:	1104b03a 	or	r2,r2,r4
   113cc:	9024927a 	slli	r18,r18,9
   113d0:	1004c03a 	cmpne	r2,r2,zero
   113d4:	bc62b03a 	or	r17,r23,r17
   113d8:	1738b03a 	or	fp,r2,fp
   113dc:	8880402c 	andhi	r2,r17,256
   113e0:	e4a4b03a 	or	r18,fp,r18
   113e4:	10000726 	beq	r2,zero,11404 <__muldf3+0x628>
   113e8:	9006d07a 	srli	r3,r18,1
   113ec:	880497fa 	slli	r2,r17,31
   113f0:	9480004c 	andi	r18,r18,1
   113f4:	8822d07a 	srli	r17,r17,1
   113f8:	1ca4b03a 	or	r18,r3,r18
   113fc:	14a4b03a 	or	r18,r2,r18
   11400:	4007883a 	mov	r3,r8
   11404:	1880ffc4 	addi	r2,r3,1023
   11408:	0080460e 	bge	zero,r2,11524 <__muldf3+0x748>
   1140c:	910001cc 	andi	r4,r18,7
   11410:	20000726 	beq	r4,zero,11430 <__muldf3+0x654>
   11414:	910003cc 	andi	r4,r18,15
   11418:	01400104 	movi	r5,4
   1141c:	21400426 	beq	r4,r5,11430 <__muldf3+0x654>
   11420:	9149883a 	add	r4,r18,r5
   11424:	24a5803a 	cmpltu	r18,r4,r18
   11428:	8ca3883a 	add	r17,r17,r18
   1142c:	2025883a 	mov	r18,r4
   11430:	8900402c 	andhi	r4,r17,256
   11434:	20000426 	beq	r4,zero,11448 <__muldf3+0x66c>
   11438:	18810004 	addi	r2,r3,1024
   1143c:	00ffc034 	movhi	r3,65280
   11440:	18ffffc4 	addi	r3,r3,-1
   11444:	88e2703a 	and	r17,r17,r3
   11448:	00c1ff84 	movi	r3,2046
   1144c:	18bf1316 	blt	r3,r2,1109c <__alt_data_end+0xffff109c>
   11450:	882c977a 	slli	r22,r17,29
   11454:	9024d0fa 	srli	r18,r18,3
   11458:	8822927a 	slli	r17,r17,9
   1145c:	1081ffcc 	andi	r2,r2,2047
   11460:	b4acb03a 	or	r22,r22,r18
   11464:	8820d33a 	srli	r16,r17,12
   11468:	3027883a 	mov	r19,r6
   1146c:	003eba06 	br	10f58 <__alt_data_end+0xffff0f58>
   11470:	8080022c 	andhi	r2,r16,8
   11474:	10000926 	beq	r2,zero,1149c <__muldf3+0x6c0>
   11478:	8880022c 	andhi	r2,r17,8
   1147c:	1000071e 	bne	r2,zero,1149c <__muldf3+0x6c0>
   11480:	00800434 	movhi	r2,16
   11484:	8c000234 	orhi	r16,r17,8
   11488:	10bfffc4 	addi	r2,r2,-1
   1148c:	e027883a 	mov	r19,fp
   11490:	80a0703a 	and	r16,r16,r2
   11494:	902d883a 	mov	r22,r18
   11498:	003f1706 	br	110f8 <__alt_data_end+0xffff10f8>
   1149c:	00800434 	movhi	r2,16
   114a0:	84000234 	orhi	r16,r16,8
   114a4:	10bfffc4 	addi	r2,r2,-1
   114a8:	80a0703a 	and	r16,r16,r2
   114ac:	003f1206 	br	110f8 <__alt_data_end+0xffff10f8>
   114b0:	147ff604 	addi	r17,r2,-40
   114b4:	3462983a 	sll	r17,r6,r17
   114b8:	0025883a 	mov	r18,zero
   114bc:	003ef306 	br	1108c <__alt_data_end+0xffff108c>
   114c0:	3009883a 	mov	r4,r6
   114c4:	d9400215 	stw	r5,8(sp)
   114c8:	d9800715 	stw	r6,28(sp)
   114cc:	da400415 	stw	r9,16(sp)
   114d0:	da800315 	stw	r10,12(sp)
   114d4:	00117a40 	call	117a4 <__clzsi2>
   114d8:	10800804 	addi	r2,r2,32
   114dc:	da800317 	ldw	r10,12(sp)
   114e0:	da400417 	ldw	r9,16(sp)
   114e4:	d9800717 	ldw	r6,28(sp)
   114e8:	d9400217 	ldw	r5,8(sp)
   114ec:	003edd06 	br	11064 <__alt_data_end+0xffff1064>
   114f0:	143ff604 	addi	r16,r2,-40
   114f4:	ac20983a 	sll	r16,r21,r16
   114f8:	002d883a 	mov	r22,zero
   114fc:	003ec106 	br	11004 <__alt_data_end+0xffff1004>
   11500:	d9800715 	stw	r6,28(sp)
   11504:	d9c00215 	stw	r7,8(sp)
   11508:	da400415 	stw	r9,16(sp)
   1150c:	00117a40 	call	117a4 <__clzsi2>
   11510:	10800804 	addi	r2,r2,32
   11514:	da400417 	ldw	r9,16(sp)
   11518:	d9c00217 	ldw	r7,8(sp)
   1151c:	d9800717 	ldw	r6,28(sp)
   11520:	003eae06 	br	10fdc <__alt_data_end+0xffff0fdc>
   11524:	00c00044 	movi	r3,1
   11528:	1887c83a 	sub	r3,r3,r2
   1152c:	01000e04 	movi	r4,56
   11530:	20fe8516 	blt	r4,r3,10f48 <__alt_data_end+0xffff0f48>
   11534:	010007c4 	movi	r4,31
   11538:	20c01b16 	blt	r4,r3,115a8 <__muldf3+0x7cc>
   1153c:	00800804 	movi	r2,32
   11540:	10c5c83a 	sub	r2,r2,r3
   11544:	888a983a 	sll	r5,r17,r2
   11548:	90c8d83a 	srl	r4,r18,r3
   1154c:	9084983a 	sll	r2,r18,r2
   11550:	88e2d83a 	srl	r17,r17,r3
   11554:	2906b03a 	or	r3,r5,r4
   11558:	1004c03a 	cmpne	r2,r2,zero
   1155c:	1886b03a 	or	r3,r3,r2
   11560:	188001cc 	andi	r2,r3,7
   11564:	10000726 	beq	r2,zero,11584 <__muldf3+0x7a8>
   11568:	188003cc 	andi	r2,r3,15
   1156c:	01000104 	movi	r4,4
   11570:	11000426 	beq	r2,r4,11584 <__muldf3+0x7a8>
   11574:	1805883a 	mov	r2,r3
   11578:	10c00104 	addi	r3,r2,4
   1157c:	1885803a 	cmpltu	r2,r3,r2
   11580:	88a3883a 	add	r17,r17,r2
   11584:	8880202c 	andhi	r2,r17,128
   11588:	10001c26 	beq	r2,zero,115fc <__muldf3+0x820>
   1158c:	3027883a 	mov	r19,r6
   11590:	00800044 	movi	r2,1
   11594:	0021883a 	mov	r16,zero
   11598:	002d883a 	mov	r22,zero
   1159c:	003e6e06 	br	10f58 <__alt_data_end+0xffff0f58>
   115a0:	4007883a 	mov	r3,r8
   115a4:	003f9706 	br	11404 <__alt_data_end+0xffff1404>
   115a8:	017ff844 	movi	r5,-31
   115ac:	2885c83a 	sub	r2,r5,r2
   115b0:	888ad83a 	srl	r5,r17,r2
   115b4:	00800804 	movi	r2,32
   115b8:	18801a26 	beq	r3,r2,11624 <__muldf3+0x848>
   115bc:	01001004 	movi	r4,64
   115c0:	20c7c83a 	sub	r3,r4,r3
   115c4:	88e2983a 	sll	r17,r17,r3
   115c8:	8ca4b03a 	or	r18,r17,r18
   115cc:	9004c03a 	cmpne	r2,r18,zero
   115d0:	2884b03a 	or	r2,r5,r2
   115d4:	144001cc 	andi	r17,r2,7
   115d8:	88000d1e 	bne	r17,zero,11610 <__muldf3+0x834>
   115dc:	0021883a 	mov	r16,zero
   115e0:	102cd0fa 	srli	r22,r2,3
   115e4:	3027883a 	mov	r19,r6
   115e8:	0005883a 	mov	r2,zero
   115ec:	b46cb03a 	or	r22,r22,r17
   115f0:	003e5906 	br	10f58 <__alt_data_end+0xffff0f58>
   115f4:	1007883a 	mov	r3,r2
   115f8:	0023883a 	mov	r17,zero
   115fc:	8820927a 	slli	r16,r17,9
   11600:	1805883a 	mov	r2,r3
   11604:	8822977a 	slli	r17,r17,29
   11608:	8020d33a 	srli	r16,r16,12
   1160c:	003ff406 	br	115e0 <__alt_data_end+0xffff15e0>
   11610:	10c003cc 	andi	r3,r2,15
   11614:	01000104 	movi	r4,4
   11618:	193ff626 	beq	r3,r4,115f4 <__alt_data_end+0xffff15f4>
   1161c:	0023883a 	mov	r17,zero
   11620:	003fd506 	br	11578 <__alt_data_end+0xffff1578>
   11624:	0023883a 	mov	r17,zero
   11628:	003fe706 	br	115c8 <__alt_data_end+0xffff15c8>
   1162c:	00800434 	movhi	r2,16
   11630:	8c000234 	orhi	r16,r17,8
   11634:	10bfffc4 	addi	r2,r2,-1
   11638:	3027883a 	mov	r19,r6
   1163c:	80a0703a 	and	r16,r16,r2
   11640:	902d883a 	mov	r22,r18
   11644:	003eac06 	br	110f8 <__alt_data_end+0xffff10f8>

00011648 <__fixdfsi>:
   11648:	280cd53a 	srli	r6,r5,20
   1164c:	00c00434 	movhi	r3,16
   11650:	18ffffc4 	addi	r3,r3,-1
   11654:	3181ffcc 	andi	r6,r6,2047
   11658:	01c0ff84 	movi	r7,1022
   1165c:	28c6703a 	and	r3,r5,r3
   11660:	280ad7fa 	srli	r5,r5,31
   11664:	3980120e 	bge	r7,r6,116b0 <__fixdfsi+0x68>
   11668:	00810744 	movi	r2,1053
   1166c:	11800c16 	blt	r2,r6,116a0 <__fixdfsi+0x58>
   11670:	00810cc4 	movi	r2,1075
   11674:	1185c83a 	sub	r2,r2,r6
   11678:	01c007c4 	movi	r7,31
   1167c:	18c00434 	orhi	r3,r3,16
   11680:	38800d16 	blt	r7,r2,116b8 <__fixdfsi+0x70>
   11684:	31befb44 	addi	r6,r6,-1043
   11688:	2084d83a 	srl	r2,r4,r2
   1168c:	1986983a 	sll	r3,r3,r6
   11690:	1884b03a 	or	r2,r3,r2
   11694:	28000726 	beq	r5,zero,116b4 <__fixdfsi+0x6c>
   11698:	0085c83a 	sub	r2,zero,r2
   1169c:	f800283a 	ret
   116a0:	00a00034 	movhi	r2,32768
   116a4:	10bfffc4 	addi	r2,r2,-1
   116a8:	2885883a 	add	r2,r5,r2
   116ac:	f800283a 	ret
   116b0:	0005883a 	mov	r2,zero
   116b4:	f800283a 	ret
   116b8:	008104c4 	movi	r2,1043
   116bc:	1185c83a 	sub	r2,r2,r6
   116c0:	1884d83a 	srl	r2,r3,r2
   116c4:	003ff306 	br	11694 <__alt_data_end+0xffff1694>

000116c8 <__floatsidf>:
   116c8:	defffd04 	addi	sp,sp,-12
   116cc:	dfc00215 	stw	ra,8(sp)
   116d0:	dc400115 	stw	r17,4(sp)
   116d4:	dc000015 	stw	r16,0(sp)
   116d8:	20002b26 	beq	r4,zero,11788 <__floatsidf+0xc0>
   116dc:	2023883a 	mov	r17,r4
   116e0:	2020d7fa 	srli	r16,r4,31
   116e4:	20002d16 	blt	r4,zero,1179c <__floatsidf+0xd4>
   116e8:	8809883a 	mov	r4,r17
   116ec:	00117a40 	call	117a4 <__clzsi2>
   116f0:	01410784 	movi	r5,1054
   116f4:	288bc83a 	sub	r5,r5,r2
   116f8:	01010cc4 	movi	r4,1075
   116fc:	2149c83a 	sub	r4,r4,r5
   11700:	00c007c4 	movi	r3,31
   11704:	1900160e 	bge	r3,r4,11760 <__floatsidf+0x98>
   11708:	00c104c4 	movi	r3,1043
   1170c:	1947c83a 	sub	r3,r3,r5
   11710:	88c6983a 	sll	r3,r17,r3
   11714:	00800434 	movhi	r2,16
   11718:	10bfffc4 	addi	r2,r2,-1
   1171c:	1886703a 	and	r3,r3,r2
   11720:	2941ffcc 	andi	r5,r5,2047
   11724:	800d883a 	mov	r6,r16
   11728:	0005883a 	mov	r2,zero
   1172c:	280a953a 	slli	r5,r5,20
   11730:	31803fcc 	andi	r6,r6,255
   11734:	01000434 	movhi	r4,16
   11738:	300c97fa 	slli	r6,r6,31
   1173c:	213fffc4 	addi	r4,r4,-1
   11740:	1906703a 	and	r3,r3,r4
   11744:	1946b03a 	or	r3,r3,r5
   11748:	1986b03a 	or	r3,r3,r6
   1174c:	dfc00217 	ldw	ra,8(sp)
   11750:	dc400117 	ldw	r17,4(sp)
   11754:	dc000017 	ldw	r16,0(sp)
   11758:	dec00304 	addi	sp,sp,12
   1175c:	f800283a 	ret
   11760:	00c002c4 	movi	r3,11
   11764:	1887c83a 	sub	r3,r3,r2
   11768:	88c6d83a 	srl	r3,r17,r3
   1176c:	8904983a 	sll	r2,r17,r4
   11770:	01000434 	movhi	r4,16
   11774:	213fffc4 	addi	r4,r4,-1
   11778:	2941ffcc 	andi	r5,r5,2047
   1177c:	1906703a 	and	r3,r3,r4
   11780:	800d883a 	mov	r6,r16
   11784:	003fe906 	br	1172c <__alt_data_end+0xffff172c>
   11788:	000d883a 	mov	r6,zero
   1178c:	000b883a 	mov	r5,zero
   11790:	0007883a 	mov	r3,zero
   11794:	0005883a 	mov	r2,zero
   11798:	003fe406 	br	1172c <__alt_data_end+0xffff172c>
   1179c:	0123c83a 	sub	r17,zero,r4
   117a0:	003fd106 	br	116e8 <__alt_data_end+0xffff16e8>

000117a4 <__clzsi2>:
   117a4:	00bfffd4 	movui	r2,65535
   117a8:	11000536 	bltu	r2,r4,117c0 <__clzsi2+0x1c>
   117ac:	00803fc4 	movi	r2,255
   117b0:	11000f36 	bltu	r2,r4,117f0 <__clzsi2+0x4c>
   117b4:	00800804 	movi	r2,32
   117b8:	0007883a 	mov	r3,zero
   117bc:	00000506 	br	117d4 <__clzsi2+0x30>
   117c0:	00804034 	movhi	r2,256
   117c4:	10bfffc4 	addi	r2,r2,-1
   117c8:	11000c2e 	bgeu	r2,r4,117fc <__clzsi2+0x58>
   117cc:	00800204 	movi	r2,8
   117d0:	00c00604 	movi	r3,24
   117d4:	20c8d83a 	srl	r4,r4,r3
   117d8:	00c00074 	movhi	r3,1
   117dc:	18c7e8c4 	addi	r3,r3,8099
   117e0:	1909883a 	add	r4,r3,r4
   117e4:	20c00003 	ldbu	r3,0(r4)
   117e8:	10c5c83a 	sub	r2,r2,r3
   117ec:	f800283a 	ret
   117f0:	00800604 	movi	r2,24
   117f4:	00c00204 	movi	r3,8
   117f8:	003ff606 	br	117d4 <__alt_data_end+0xffff17d4>
   117fc:	00800404 	movi	r2,16
   11800:	1007883a 	mov	r3,r2
   11804:	003ff306 	br	117d4 <__alt_data_end+0xffff17d4>

00011808 <__mulsi3>:
   11808:	0005883a 	mov	r2,zero
   1180c:	20000726 	beq	r4,zero,1182c <__mulsi3+0x24>
   11810:	20c0004c 	andi	r3,r4,1
   11814:	2008d07a 	srli	r4,r4,1
   11818:	18000126 	beq	r3,zero,11820 <__mulsi3+0x18>
   1181c:	1145883a 	add	r2,r2,r5
   11820:	294b883a 	add	r5,r5,r5
   11824:	203ffa1e 	bne	r4,zero,11810 <__alt_data_end+0xffff1810>
   11828:	f800283a 	ret
   1182c:	f800283a 	ret

00011830 <memset>:
   11830:	2005883a 	mov	r2,r4
   11834:	2007883a 	mov	r3,r4
   11838:	218d883a 	add	r6,r4,r6
   1183c:	19800326 	beq	r3,r6,1184c <memset+0x1c>
   11840:	19400005 	stb	r5,0(r3)
   11844:	18c00044 	addi	r3,r3,1
   11848:	003ffc06 	br	1183c <__alt_data_end+0xffff183c>
   1184c:	f800283a 	ret

00011850 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11850:	008007c4 	movi	r2,31
   11854:	11002136 	bltu	r2,r4,118dc <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11858:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1185c:	00ffff84 	movi	r3,-2
   11860:	38c4703a 	and	r2,r7,r3
   11864:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11868:	200490fa 	slli	r2,r4,3
   1186c:	02000074 	movhi	r8,1
   11870:	42088604 	addi	r8,r8,8728
   11874:	4085883a 	add	r2,r8,r2
   11878:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   1187c:	11400115 	stw	r5,4(r2)
   11880:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11884:	30000726 	beq	r6,zero,118a4 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11888:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1188c:	28c6703a 	and	r3,r5,r3
   11890:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11894:	d0e03317 	ldw	r3,-32564(gp)
   11898:	1104983a 	sll	r2,r2,r4
   1189c:	10c4b03a 	or	r2,r2,r3
   118a0:	00000706 	br	118c0 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118a4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118a8:	28c6703a 	and	r3,r5,r3
   118ac:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   118b0:	1104983a 	sll	r2,r2,r4
   118b4:	d0e03317 	ldw	r3,-32564(gp)
   118b8:	0084303a 	nor	r2,zero,r2
   118bc:	10c4703a 	and	r2,r2,r3
   118c0:	d0a03315 	stw	r2,-32564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   118c4:	d0a03317 	ldw	r2,-32564(gp)
   118c8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118cc:	2801703a 	wrctl	status,r5
   118d0:	3801703a 	wrctl	status,r7
   118d4:	0005883a 	mov	r2,zero
   118d8:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   118dc:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   118e0:	f800283a 	ret

000118e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   118e4:	deffff04 	addi	sp,sp,-4
   118e8:	01000074 	movhi	r4,1
   118ec:	01400074 	movhi	r5,1
   118f0:	dfc00015 	stw	ra,0(sp)
   118f4:	21082c04 	addi	r4,r4,8368
   118f8:	29485504 	addi	r5,r5,8532

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   118fc:	2140061e 	bne	r4,r5,11918 <alt_load+0x34>
   11900:	01000074 	movhi	r4,1
   11904:	01400074 	movhi	r5,1
   11908:	21000804 	addi	r4,r4,32
   1190c:	29400804 	addi	r5,r5,32
   11910:	2140121e 	bne	r4,r5,1195c <alt_load+0x78>
   11914:	00000b06 	br	11944 <alt_load+0x60>
   11918:	00c00074 	movhi	r3,1
   1191c:	18c85504 	addi	r3,r3,8532
   11920:	1907c83a 	sub	r3,r3,r4
   11924:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11928:	10fff526 	beq	r2,r3,11900 <__alt_data_end+0xffff1900>
    {
      *to++ = *from++;
   1192c:	114f883a 	add	r7,r2,r5
   11930:	39c00017 	ldw	r7,0(r7)
   11934:	110d883a 	add	r6,r2,r4
   11938:	10800104 	addi	r2,r2,4
   1193c:	31c00015 	stw	r7,0(r6)
   11940:	003ff906 	br	11928 <__alt_data_end+0xffff1928>
   11944:	01000074 	movhi	r4,1
   11948:	01400074 	movhi	r5,1
   1194c:	2107c904 	addi	r4,r4,7972
   11950:	2947c904 	addi	r5,r5,7972

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11954:	2140101e 	bne	r4,r5,11998 <alt_load+0xb4>
   11958:	00000b06 	br	11988 <alt_load+0xa4>
   1195c:	00c00074 	movhi	r3,1
   11960:	18c06004 	addi	r3,r3,384
   11964:	1907c83a 	sub	r3,r3,r4
   11968:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1196c:	10fff526 	beq	r2,r3,11944 <__alt_data_end+0xffff1944>
    {
      *to++ = *from++;
   11970:	114f883a 	add	r7,r2,r5
   11974:	39c00017 	ldw	r7,0(r7)
   11978:	110d883a 	add	r6,r2,r4
   1197c:	10800104 	addi	r2,r2,4
   11980:	31c00015 	stw	r7,0(r6)
   11984:	003ff906 	br	1196c <__alt_data_end+0xffff196c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11988:	0011d6c0 	call	11d6c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1198c:	dfc00017 	ldw	ra,0(sp)
   11990:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11994:	0011e581 	jmpi	11e58 <alt_icache_flush_all>
   11998:	00c00074 	movhi	r3,1
   1199c:	18c82c04 	addi	r3,r3,8368
   119a0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   119a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   119a8:	18bff726 	beq	r3,r2,11988 <__alt_data_end+0xffff1988>
    {
      *to++ = *from++;
   119ac:	114f883a 	add	r7,r2,r5
   119b0:	39c00017 	ldw	r7,0(r7)
   119b4:	110d883a 	add	r6,r2,r4
   119b8:	10800104 	addi	r2,r2,4
   119bc:	31c00015 	stw	r7,0(r6)
   119c0:	003ff906 	br	119a8 <__alt_data_end+0xffff19a8>

000119c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   119c4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   119c8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   119cc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   119d0:	0011ba80 	call	11ba8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   119d4:	0011bc80 	call	11bc8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   119d8:	d1a03417 	ldw	r6,-32560(gp)
   119dc:	d1603517 	ldw	r5,-32556(gp)
   119e0:	d1203617 	ldw	r4,-32552(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   119e4:	dfc00017 	ldw	ra,0(sp)
   119e8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   119ec:	00102f41 	jmpi	102f4 <main>

000119f0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   119f0:	defff204 	addi	sp,sp,-56
   119f4:	2005883a 	mov	r2,r4
   119f8:	dfc00a15 	stw	ra,40(sp)
   119fc:	df000915 	stw	fp,36(sp)
   11a00:	ddc00815 	stw	r23,32(sp)
   11a04:	dd800715 	stw	r22,28(sp)
   11a08:	dd400615 	stw	r21,24(sp)
   11a0c:	dd000515 	stw	r20,20(sp)
   11a10:	dcc00415 	stw	r19,16(sp)
   11a14:	dc800315 	stw	r18,12(sp)
   11a18:	dc400215 	stw	r17,8(sp)
   11a1c:	dc000115 	stw	r16,4(sp)
   11a20:	d9400b15 	stw	r5,44(sp)
   11a24:	d9800c15 	stw	r6,48(sp)
   11a28:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11a2c:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   11a30:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   11a34:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   11a38:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   11a3c:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   11a40:	11000007 	ldb	r4,0(r2)
   11a44:	20003a26 	beq	r4,zero,11b30 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11a48:	24000226 	beq	r4,r16,11a54 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   11a4c:	14400044 	addi	r17,r2,1
   11a50:	00001406 	br	11aa4 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   11a54:	14400084 	addi	r17,r2,2
   11a58:	10800047 	ldb	r2,1(r2)
   11a5c:	10003426 	beq	r2,zero,11b30 <alt_printf+0x140>
            {
                if (c == '%')
   11a60:	1400021e 	bne	r2,r16,11a6c <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   11a64:	8009883a 	mov	r4,r16
   11a68:	00000e06 	br	11aa4 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   11a6c:	1480051e 	bne	r2,r18,11a84 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   11a70:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   11a74:	ad800104 	addi	r22,r21,4
   11a78:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   11a7c:	0011b600 	call	11b60 <alt_putchar>
   11a80:	00002906 	br	11b28 <alt_printf+0x138>
                }
                else if (c == 'x')
   11a84:	14c0201e 	bne	r2,r19,11b08 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   11a88:	adc00017 	ldw	r23,0(r21)
   11a8c:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   11a90:	b8000326 	beq	r23,zero,11aa0 <alt_printf+0xb0>
   11a94:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   11a98:	00c003c4 	movi	r3,15
   11a9c:	00000306 	br	11aac <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   11aa0:	01000c04 	movi	r4,48
   11aa4:	0011b600 	call	11b60 <alt_putchar>
                        continue;
   11aa8:	00001f06 	br	11b28 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   11aac:	1d84983a 	sll	r2,r3,r22
   11ab0:	15c4703a 	and	r2,r2,r23
   11ab4:	1000021e 	bne	r2,zero,11ac0 <alt_printf+0xd0>
                        digit_shift -= 4;
   11ab8:	b5bfff04 	addi	r22,r22,-4
   11abc:	003ffb06 	br	11aac <__alt_data_end+0xffff1aac>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11ac0:	070003c4 	movi	fp,15
                        if (digit <= 9)
   11ac4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11ac8:	b0001716 	blt	r22,zero,11b28 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11acc:	e588983a 	sll	r4,fp,r22
   11ad0:	25c8703a 	and	r4,r4,r23
   11ad4:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   11ad8:	19000236 	bltu	r3,r4,11ae4 <alt_printf+0xf4>
                            c = '0' + digit;
   11adc:	21000c04 	addi	r4,r4,48
   11ae0:	00000106 	br	11ae8 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   11ae4:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   11ae8:	21003fcc 	andi	r4,r4,255
   11aec:	2100201c 	xori	r4,r4,128
   11af0:	213fe004 	addi	r4,r4,-128
   11af4:	d8c00015 	stw	r3,0(sp)
   11af8:	0011b600 	call	11b60 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11afc:	b5bfff04 	addi	r22,r22,-4
   11b00:	d8c00017 	ldw	r3,0(sp)
   11b04:	003ff006 	br	11ac8 <__alt_data_end+0xffff1ac8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   11b08:	1500071e 	bne	r2,r20,11b28 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   11b0c:	ad800017 	ldw	r22,0(r21)
   11b10:	ad400104 	addi	r21,r21,4

                    while(*s)
   11b14:	b1000007 	ldb	r4,0(r22)
   11b18:	20000326 	beq	r4,zero,11b28 <alt_printf+0x138>
                      alt_putchar(*s++);
   11b1c:	b5800044 	addi	r22,r22,1
   11b20:	0011b600 	call	11b60 <alt_putchar>
   11b24:	003ffb06 	br	11b14 <__alt_data_end+0xffff1b14>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   11b28:	8805883a 	mov	r2,r17
   11b2c:	003fc406 	br	11a40 <__alt_data_end+0xffff1a40>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   11b30:	dfc00a17 	ldw	ra,40(sp)
   11b34:	df000917 	ldw	fp,36(sp)
   11b38:	ddc00817 	ldw	r23,32(sp)
   11b3c:	dd800717 	ldw	r22,28(sp)
   11b40:	dd400617 	ldw	r21,24(sp)
   11b44:	dd000517 	ldw	r20,20(sp)
   11b48:	dcc00417 	ldw	r19,16(sp)
   11b4c:	dc800317 	ldw	r18,12(sp)
   11b50:	dc400217 	ldw	r17,8(sp)
   11b54:	dc000117 	ldw	r16,4(sp)
   11b58:	dec00e04 	addi	sp,sp,56
   11b5c:	f800283a 	ret

00011b60 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11b60:	defffd04 	addi	sp,sp,-12
   11b64:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   11b68:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11b6c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11b70:	01000074 	movhi	r4,1
   11b74:	000f883a 	mov	r7,zero
   11b78:	01800044 	movi	r6,1
   11b7c:	d80b883a 	mov	r5,sp
   11b80:	21084e04 	addi	r4,r4,8504
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11b84:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11b88:	0011bd80 	call	11bd8 <altera_avalon_jtag_uart_write>
   11b8c:	00ffffc4 	movi	r3,-1
   11b90:	10c00126 	beq	r2,r3,11b98 <alt_putchar+0x38>
        return -1;
    }
    return c;
   11b94:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   11b98:	dfc00217 	ldw	ra,8(sp)
   11b9c:	dc000117 	ldw	r16,4(sp)
   11ba0:	dec00304 	addi	sp,sp,12
   11ba4:	f800283a 	ret

00011ba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11ba8:	deffff04 	addi	sp,sp,-4
   11bac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11bb0:	0011e5c0 	call	11e5c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11bb4:	00800044 	movi	r2,1
   11bb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11bbc:	dfc00017 	ldw	ra,0(sp)
   11bc0:	dec00104 	addi	sp,sp,4
   11bc4:	f800283a 	ret

00011bc8 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11bc8:	01000074 	movhi	r4,1
   11bcc:	d1600304 	addi	r5,gp,-32756
   11bd0:	21082c04 	addi	r4,r4,8368
   11bd4:	0011d781 	jmpi	11d78 <alt_dev_llist_insert>

00011bd8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11bd8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11bdc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11be0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11be4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11be8:	2980072e 	bgeu	r5,r6,11c08 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11bec:	38c00037 	ldwio	r3,0(r7)
   11bf0:	18ffffec 	andhi	r3,r3,65535
   11bf4:	183ffc26 	beq	r3,zero,11be8 <__alt_data_end+0xffff1be8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11bf8:	28c00007 	ldb	r3,0(r5)
   11bfc:	20c00035 	stwio	r3,0(r4)
   11c00:	29400044 	addi	r5,r5,1
   11c04:	003ff806 	br	11be8 <__alt_data_end+0xffff1be8>

  return count;
}
   11c08:	f800283a 	ret

00011c0c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11c0c:	d1600304 	addi	r5,gp,-32756
   11c10:	0011de41 	jmpi	11de4 <alt_find_dev>

00011c14 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11c14:	20800a17 	ldw	r2,40(r4)
   11c18:	10800023 	ldbuio	r2,0(r2)
   11c1c:	28800005 	stb	r2,0(r5)

	return 0;
}
   11c20:	0005883a 	mov	r2,zero
   11c24:	f800283a 	ret

00011c28 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11c28:	20800a17 	ldw	r2,40(r4)
   11c2c:	29400fcc 	andi	r5,r5,63
   11c30:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11c34:	20800a17 	ldw	r2,40(r4)
   11c38:	10800063 	ldbuio	r2,1(r2)
   11c3c:	30800005 	stb	r2,0(r6)

	return 0;
}
   11c40:	0005883a 	mov	r2,zero
   11c44:	f800283a 	ret

00011c48 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11c48:	20800a17 	ldw	r2,40(r4)
   11c4c:	29400fcc 	andi	r5,r5,63
   11c50:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11c54:	20800a17 	ldw	r2,40(r4)
   11c58:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11c5c:	0005883a 	mov	r2,zero
   11c60:	f800283a 	ret

00011c64 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11c64:	20800a17 	ldw	r2,40(r4)
   11c68:	00c00c84 	movi	r3,50
   11c6c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11c70:	20800a17 	ldw	r2,40(r4)
   11c74:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11c78:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11c7c:	10803fcc 	andi	r2,r2,255
   11c80:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11c84:	20800a17 	ldw	r2,40(r4)
   11c88:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11c8c:	20800a17 	ldw	r2,40(r4)
   11c90:	10800063 	ldbuio	r2,1(r2)
   11c94:	10803fcc 	andi	r2,r2,255
   11c98:	1006923a 	slli	r3,r2,8
   11c9c:	28800017 	ldw	r2,0(r5)
   11ca0:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11ca4:	10e0000c 	andi	r3,r2,32768
   11ca8:	18000126 	beq	r3,zero,11cb0 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11cac:	10bffff4 	orhi	r2,r2,65535
   11cb0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11cb4:	0005883a 	mov	r2,zero
   11cb8:	f800283a 	ret

00011cbc <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cbc:	20800a17 	ldw	r2,40(r4)
   11cc0:	00c00d04 	movi	r3,52
   11cc4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11cc8:	20800a17 	ldw	r2,40(r4)
   11ccc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cd0:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11cd4:	10803fcc 	andi	r2,r2,255
   11cd8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cdc:	20800a17 	ldw	r2,40(r4)
   11ce0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11ce4:	20800a17 	ldw	r2,40(r4)
   11ce8:	10800063 	ldbuio	r2,1(r2)
   11cec:	10803fcc 	andi	r2,r2,255
   11cf0:	1006923a 	slli	r3,r2,8
   11cf4:	28800017 	ldw	r2,0(r5)
   11cf8:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   11cfc:	10e0000c 	andi	r3,r2,32768
   11d00:	18000126 	beq	r3,zero,11d08 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11d04:	10bffff4 	orhi	r2,r2,65535
   11d08:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11d0c:	0005883a 	mov	r2,zero
   11d10:	f800283a 	ret

00011d14 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d14:	20800a17 	ldw	r2,40(r4)
   11d18:	00c00d84 	movi	r3,54
   11d1c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d20:	20800a17 	ldw	r2,40(r4)
   11d24:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d28:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d2c:	10803fcc 	andi	r2,r2,255
   11d30:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d34:	20800a17 	ldw	r2,40(r4)
   11d38:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11d3c:	20800a17 	ldw	r2,40(r4)
   11d40:	10800063 	ldbuio	r2,1(r2)
   11d44:	10803fcc 	andi	r2,r2,255
   11d48:	1006923a 	slli	r3,r2,8
   11d4c:	28800017 	ldw	r2,0(r5)
   11d50:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11d54:	10e0000c 	andi	r3,r2,32768
   11d58:	18000126 	beq	r3,zero,11d60 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11d5c:	10bffff4 	orhi	r2,r2,65535
   11d60:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11d64:	0005883a 	mov	r2,zero
   11d68:	f800283a 	ret

00011d6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11d6c:	f800283a 	ret

00011d70 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11d70:	3005883a 	mov	r2,r6
   11d74:	f800283a 	ret

00011d78 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11d78:	20000226 	beq	r4,zero,11d84 <alt_dev_llist_insert+0xc>
   11d7c:	20800217 	ldw	r2,8(r4)
   11d80:	1000101e 	bne	r2,zero,11dc4 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11d84:	d0a00717 	ldw	r2,-32740(gp)
   11d88:	10000926 	beq	r2,zero,11db0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11d8c:	deffff04 	addi	sp,sp,-4
   11d90:	dfc00015 	stw	ra,0(sp)
   11d94:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11d98:	00c00584 	movi	r3,22
   11d9c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11da0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11da4:	dfc00017 	ldw	ra,0(sp)
   11da8:	dec00104 	addi	sp,sp,4
   11dac:	f800283a 	ret
   11db0:	d0a03804 	addi	r2,gp,-32544
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11db4:	00c00584 	movi	r3,22
   11db8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11dbc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11dc0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11dc4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11dc8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11dcc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11dd0:	28800017 	ldw	r2,0(r5)
   11dd4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11dd8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   11ddc:	0005883a 	mov	r2,zero
   11de0:	f800283a 	ret

00011de4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11de4:	defffb04 	addi	sp,sp,-20
   11de8:	dcc00315 	stw	r19,12(sp)
   11dec:	dc800215 	stw	r18,8(sp)
   11df0:	dc400115 	stw	r17,4(sp)
   11df4:	dc000015 	stw	r16,0(sp)
   11df8:	dfc00415 	stw	ra,16(sp)
   11dfc:	2027883a 	mov	r19,r4
   11e00:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11e04:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11e08:	0011f080 	call	11f08 <strlen>
   11e0c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11e10:	84400726 	beq	r16,r17,11e30 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11e14:	81000217 	ldw	r4,8(r16)
   11e18:	900d883a 	mov	r6,r18
   11e1c:	980b883a 	mov	r5,r19
   11e20:	0011ed80 	call	11ed8 <memcmp>
   11e24:	10000426 	beq	r2,zero,11e38 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11e28:	84000017 	ldw	r16,0(r16)
   11e2c:	003ff806 	br	11e10 <__alt_data_end+0xffff1e10>
  }
  
  /* No match found */
  
  return NULL;
   11e30:	0005883a 	mov	r2,zero
   11e34:	00000106 	br	11e3c <alt_find_dev+0x58>
   11e38:	8005883a 	mov	r2,r16
}
   11e3c:	dfc00417 	ldw	ra,16(sp)
   11e40:	dcc00317 	ldw	r19,12(sp)
   11e44:	dc800217 	ldw	r18,8(sp)
   11e48:	dc400117 	ldw	r17,4(sp)
   11e4c:	dc000017 	ldw	r16,0(sp)
   11e50:	dec00504 	addi	sp,sp,20
   11e54:	f800283a 	ret

00011e58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11e58:	f800283a 	ret

00011e5c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11e5c:	000170fa 	wrctl	ienable,zero
   11e60:	f800283a 	ret

00011e64 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11e64:	213ffe84 	addi	r4,r4,-6
   11e68:	008003c4 	movi	r2,15
   11e6c:	11001636 	bltu	r2,r4,11ec8 <alt_exception_cause_generated_bad_addr+0x64>
   11e70:	200890ba 	slli	r4,r4,2
   11e74:	00800074 	movhi	r2,1
   11e78:	1087a204 	addi	r2,r2,7816
   11e7c:	2089883a 	add	r4,r4,r2
   11e80:	20800017 	ldw	r2,0(r4)
   11e84:	1000683a 	jmp	r2
   11e88:	00011ed0 	cmplti	zero,zero,1147
   11e8c:	00011ed0 	cmplti	zero,zero,1147
   11e90:	00011ec8 	cmpgei	zero,zero,1147
   11e94:	00011ec8 	cmpgei	zero,zero,1147
   11e98:	00011ec8 	cmpgei	zero,zero,1147
   11e9c:	00011ed0 	cmplti	zero,zero,1147
   11ea0:	00011ec8 	cmpgei	zero,zero,1147
   11ea4:	00011ec8 	cmpgei	zero,zero,1147
   11ea8:	00011ed0 	cmplti	zero,zero,1147
   11eac:	00011ed0 	cmplti	zero,zero,1147
   11eb0:	00011ec8 	cmpgei	zero,zero,1147
   11eb4:	00011ed0 	cmplti	zero,zero,1147
   11eb8:	00011ec8 	cmpgei	zero,zero,1147
   11ebc:	00011ec8 	cmpgei	zero,zero,1147
   11ec0:	00011ec8 	cmpgei	zero,zero,1147
   11ec4:	00011ed0 	cmplti	zero,zero,1147
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11ec8:	0005883a 	mov	r2,zero
   11ecc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11ed0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11ed4:	f800283a 	ret

00011ed8 <memcmp>:
   11ed8:	218d883a 	add	r6,r4,r6
   11edc:	21800826 	beq	r4,r6,11f00 <memcmp+0x28>
   11ee0:	20800003 	ldbu	r2,0(r4)
   11ee4:	28c00003 	ldbu	r3,0(r5)
   11ee8:	10c00226 	beq	r2,r3,11ef4 <memcmp+0x1c>
   11eec:	10c5c83a 	sub	r2,r2,r3
   11ef0:	f800283a 	ret
   11ef4:	21000044 	addi	r4,r4,1
   11ef8:	29400044 	addi	r5,r5,1
   11efc:	003ff706 	br	11edc <__alt_data_end+0xffff1edc>
   11f00:	0005883a 	mov	r2,zero
   11f04:	f800283a 	ret

00011f08 <strlen>:
   11f08:	2005883a 	mov	r2,r4
   11f0c:	10c00007 	ldb	r3,0(r2)
   11f10:	18000226 	beq	r3,zero,11f1c <strlen+0x14>
   11f14:	10800044 	addi	r2,r2,1
   11f18:	003ffc06 	br	11f0c <__alt_data_end+0xffff1f0c>
   11f1c:	1105c83a 	sub	r2,r2,r4
   11f20:	f800283a 	ret
